/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@aics/volume-viewer/es/workers/FetchZarrWorker.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aics/volume-viewer/es/workers/FetchZarrWorker.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var zarr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zarr */ \"./node_modules/zarr/zarr.mjs\");\n\n\nfunction convertChannel(channelData, nx, ny, nz, dtype, downsampleZ) {\n  console.log(\"begin convert channel\");\n  var nresultpixels = nx * ny * Math.ceil(nz / downsampleZ);\n  var u8 = new Uint8Array(nresultpixels);\n  var xy = nx * ny;\n\n  if (dtype === \"|u1\") {\n    // flatten the 3d array and convert to uint8\n    // todo test perf with a loop over x,y,z instead\n    for (var z = 0, slice = 0; z < nz; z += downsampleZ, ++slice) {\n      for (var j = 0; j < xy; ++j) {\n        var yrow = Math.floor(j / nx);\n        var xcol = j % nx;\n        u8[j + slice * xy] = channelData[z][yrow][xcol];\n      }\n    }\n  } else {\n    var chmin = 65535; //metadata.channels[i].window.min;\n\n    var chmax = 0; //metadata.channels[i].window.max;\n    // find min and max (only of data we are sampling?)\n\n    for (var _z = 0; _z < nz; _z += downsampleZ) {\n      for (var _j = 0; _j < xy; ++_j) {\n        var _yrow = Math.floor(_j / nx);\n\n        var _xcol = _j % nx;\n\n        var val = channelData[_z][_yrow][_xcol];\n\n        if (val < chmin) {\n          chmin = val;\n        }\n\n        if (val > chmax) {\n          chmax = val;\n        }\n      }\n    } // flatten the 3d array and convert to uint8\n\n\n    for (var _z2 = 0, _slice = 0; _z2 < nz; _z2 += downsampleZ, ++_slice) {\n      for (var _j2 = 0; _j2 < xy; ++_j2) {\n        var _yrow2 = Math.floor(_j2 / nx);\n\n        var _xcol2 = _j2 % nx;\n\n        u8[_j2 + _slice * xy] = (channelData[_z2][_yrow2][_xcol2] - chmin) / (chmax - chmin) * 255;\n      }\n    }\n  }\n\n  console.log(\"end convert channel\");\n  return u8;\n}\n\nself.onmessage = function (e) {\n  var time = e.data.time;\n  var channelIndex = e.data.channel;\n  var downsampleZ = e.data.downsampleZ;\n  var store = new zarr__WEBPACK_IMPORTED_MODULE_0__.HTTPStore(e.data.urlStore);\n  (0,zarr__WEBPACK_IMPORTED_MODULE_0__.openArray)({\n    store: store,\n    path: e.data.path,\n    mode: \"r\"\n  }).then(function (level) {\n    return level.get([time, channelIndex, null, null, null]);\n  }).then(function (channel) {\n    channel = channel;\n    var nz = channel.shape[0];\n    var ny = channel.shape[1];\n    var nx = channel.shape[2];\n    var u8 = convertChannel(channel.data, nx, ny, nz, channel.dtype, downsampleZ);\n    var results = {\n      data: u8,\n      channel: channelIndex\n    };\n    postMessage(results, [results.data.buffer]);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGFpY3Mvdm9sdW1lLXZpZXdlci9lcy93b3JrZXJzL0ZldGNoWmFycldvcmtlci5qcy5qcyIsIm1hcHBpbmdzIjoiOztBQUE0Qzs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsUUFBUTtBQUN2QyxzQkFBc0IsUUFBUTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLHVCQUF1Qjs7QUFFdkIsbUJBQW1CO0FBQ25COztBQUVBLHFCQUFxQixTQUFTO0FBQzlCLHVCQUF1QixTQUFTO0FBQ2hDOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOLGtDQUFrQyxVQUFVO0FBQzVDLHdCQUF3QixVQUFVO0FBQ2xDOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwyQ0FBUztBQUMzQixFQUFFLCtDQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFpY3Mvd2ViLTNkLXZpZXdlci8uL25vZGVfbW9kdWxlcy9AYWljcy92b2x1bWUtdmlld2VyL2VzL3dvcmtlcnMvRmV0Y2haYXJyV29ya2VyLmpzP2VkNDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSFRUUFN0b3JlLCBvcGVuQXJyYXkgfSBmcm9tIFwiemFyclwiO1xuXG5mdW5jdGlvbiBjb252ZXJ0Q2hhbm5lbChjaGFubmVsRGF0YSwgbngsIG55LCBueiwgZHR5cGUsIGRvd25zYW1wbGVaKSB7XG4gIGNvbnNvbGUubG9nKFwiYmVnaW4gY29udmVydCBjaGFubmVsXCIpO1xuICB2YXIgbnJlc3VsdHBpeGVscyA9IG54ICogbnkgKiBNYXRoLmNlaWwobnogLyBkb3duc2FtcGxlWik7XG4gIHZhciB1OCA9IG5ldyBVaW50OEFycmF5KG5yZXN1bHRwaXhlbHMpO1xuICB2YXIgeHkgPSBueCAqIG55O1xuXG4gIGlmIChkdHlwZSA9PT0gXCJ8dTFcIikge1xuICAgIC8vIGZsYXR0ZW4gdGhlIDNkIGFycmF5IGFuZCBjb252ZXJ0IHRvIHVpbnQ4XG4gICAgLy8gdG9kbyB0ZXN0IHBlcmYgd2l0aCBhIGxvb3Agb3ZlciB4LHkseiBpbnN0ZWFkXG4gICAgZm9yICh2YXIgeiA9IDAsIHNsaWNlID0gMDsgeiA8IG56OyB6ICs9IGRvd25zYW1wbGVaLCArK3NsaWNlKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHh5OyArK2opIHtcbiAgICAgICAgdmFyIHlyb3cgPSBNYXRoLmZsb29yKGogLyBueCk7XG4gICAgICAgIHZhciB4Y29sID0gaiAlIG54O1xuICAgICAgICB1OFtqICsgc2xpY2UgKiB4eV0gPSBjaGFubmVsRGF0YVt6XVt5cm93XVt4Y29sXTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNobWluID0gNjU1MzU7IC8vbWV0YWRhdGEuY2hhbm5lbHNbaV0ud2luZG93Lm1pbjtcblxuICAgIHZhciBjaG1heCA9IDA7IC8vbWV0YWRhdGEuY2hhbm5lbHNbaV0ud2luZG93Lm1heDtcbiAgICAvLyBmaW5kIG1pbiBhbmQgbWF4IChvbmx5IG9mIGRhdGEgd2UgYXJlIHNhbXBsaW5nPylcblxuICAgIGZvciAodmFyIF96ID0gMDsgX3ogPCBuejsgX3ogKz0gZG93bnNhbXBsZVopIHtcbiAgICAgIGZvciAodmFyIF9qID0gMDsgX2ogPCB4eTsgKytfaikge1xuICAgICAgICB2YXIgX3lyb3cgPSBNYXRoLmZsb29yKF9qIC8gbngpO1xuXG4gICAgICAgIHZhciBfeGNvbCA9IF9qICUgbng7XG5cbiAgICAgICAgdmFyIHZhbCA9IGNoYW5uZWxEYXRhW196XVtfeXJvd11bX3hjb2xdO1xuXG4gICAgICAgIGlmICh2YWwgPCBjaG1pbikge1xuICAgICAgICAgIGNobWluID0gdmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCA+IGNobWF4KSB7XG4gICAgICAgICAgY2htYXggPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIGZsYXR0ZW4gdGhlIDNkIGFycmF5IGFuZCBjb252ZXJ0IHRvIHVpbnQ4XG5cblxuICAgIGZvciAodmFyIF96MiA9IDAsIF9zbGljZSA9IDA7IF96MiA8IG56OyBfejIgKz0gZG93bnNhbXBsZVosICsrX3NsaWNlKSB7XG4gICAgICBmb3IgKHZhciBfajIgPSAwOyBfajIgPCB4eTsgKytfajIpIHtcbiAgICAgICAgdmFyIF95cm93MiA9IE1hdGguZmxvb3IoX2oyIC8gbngpO1xuXG4gICAgICAgIHZhciBfeGNvbDIgPSBfajIgJSBueDtcblxuICAgICAgICB1OFtfajIgKyBfc2xpY2UgKiB4eV0gPSAoY2hhbm5lbERhdGFbX3oyXVtfeXJvdzJdW194Y29sMl0gLSBjaG1pbikgLyAoY2htYXggLSBjaG1pbikgKiAyNTU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc29sZS5sb2coXCJlbmQgY29udmVydCBjaGFubmVsXCIpO1xuICByZXR1cm4gdTg7XG59XG5cbnNlbGYub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcbiAgdmFyIHRpbWUgPSBlLmRhdGEudGltZTtcbiAgdmFyIGNoYW5uZWxJbmRleCA9IGUuZGF0YS5jaGFubmVsO1xuICB2YXIgZG93bnNhbXBsZVogPSBlLmRhdGEuZG93bnNhbXBsZVo7XG4gIHZhciBzdG9yZSA9IG5ldyBIVFRQU3RvcmUoZS5kYXRhLnVybFN0b3JlKTtcbiAgb3BlbkFycmF5KHtcbiAgICBzdG9yZTogc3RvcmUsXG4gICAgcGF0aDogZS5kYXRhLnBhdGgsXG4gICAgbW9kZTogXCJyXCJcbiAgfSkudGhlbihmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICByZXR1cm4gbGV2ZWwuZ2V0KFt0aW1lLCBjaGFubmVsSW5kZXgsIG51bGwsIG51bGwsIG51bGxdKTtcbiAgfSkudGhlbihmdW5jdGlvbiAoY2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBjaGFubmVsO1xuICAgIHZhciBueiA9IGNoYW5uZWwuc2hhcGVbMF07XG4gICAgdmFyIG55ID0gY2hhbm5lbC5zaGFwZVsxXTtcbiAgICB2YXIgbnggPSBjaGFubmVsLnNoYXBlWzJdO1xuICAgIHZhciB1OCA9IGNvbnZlcnRDaGFubmVsKGNoYW5uZWwuZGF0YSwgbngsIG55LCBueiwgY2hhbm5lbC5kdHlwZSwgZG93bnNhbXBsZVopO1xuICAgIHZhciByZXN1bHRzID0ge1xuICAgICAgZGF0YTogdTgsXG4gICAgICBjaGFubmVsOiBjaGFubmVsSW5kZXhcbiAgICB9O1xuICAgIHBvc3RNZXNzYWdlKHJlc3VsdHMsIFtyZXN1bHRzLmRhdGEuYnVmZmVyXSk7XG4gIH0pO1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@aics/volume-viewer/es/workers/FetchZarrWorker.js\n");

/***/ }),

/***/ "./node_modules/zarr/core.mjs":
/*!************************************!*\
  !*** ./node_modules/zarr/core.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ArrayNotFoundError\": () => (/* binding */ ArrayNotFoundError),\n/* harmony export */   \"BoundsCheckError\": () => (/* binding */ BoundsCheckError),\n/* harmony export */   \"ContainsArrayError\": () => (/* binding */ ContainsArrayError),\n/* harmony export */   \"ContainsGroupError\": () => (/* binding */ ContainsGroupError),\n/* harmony export */   \"Group\": () => (/* binding */ Group),\n/* harmony export */   \"GroupNotFoundError\": () => (/* binding */ GroupNotFoundError),\n/* harmony export */   \"HTTPError\": () => (/* binding */ HTTPError),\n/* harmony export */   \"HTTPStore\": () => (/* binding */ HTTPStore),\n/* harmony export */   \"InvalidSliceError\": () => (/* binding */ InvalidSliceError),\n/* harmony export */   \"KeyError\": () => (/* binding */ KeyError),\n/* harmony export */   \"MemoryStore\": () => (/* binding */ MemoryStore),\n/* harmony export */   \"NegativeStepError\": () => (/* binding */ NegativeStepError),\n/* harmony export */   \"NestedArray\": () => (/* binding */ NestedArray),\n/* harmony export */   \"ObjectStore\": () => (/* binding */ ObjectStore),\n/* harmony export */   \"PathNotFoundError\": () => (/* binding */ PathNotFoundError),\n/* harmony export */   \"PermissionError\": () => (/* binding */ PermissionError),\n/* harmony export */   \"TooManyIndicesError\": () => (/* binding */ TooManyIndicesError),\n/* harmony export */   \"ValueError\": () => (/* binding */ ValueError),\n/* harmony export */   \"ZarrArray\": () => (/* binding */ ZarrArray),\n/* harmony export */   \"addCodec\": () => (/* binding */ addCodec),\n/* harmony export */   \"array\": () => (/* binding */ array),\n/* harmony export */   \"create\": () => (/* binding */ create),\n/* harmony export */   \"createProxy\": () => (/* binding */ createProxy),\n/* harmony export */   \"empty\": () => (/* binding */ empty),\n/* harmony export */   \"full\": () => (/* binding */ full),\n/* harmony export */   \"getCodec\": () => (/* binding */ getCodec),\n/* harmony export */   \"getTypedArrayCtr\": () => (/* binding */ getTypedArrayCtr),\n/* harmony export */   \"getTypedArrayDtypeString\": () => (/* binding */ getTypedArrayDtypeString),\n/* harmony export */   \"group\": () => (/* binding */ group),\n/* harmony export */   \"isKeyError\": () => (/* binding */ isKeyError),\n/* harmony export */   \"normalizeStoreArgument\": () => (/* binding */ normalizeStoreArgument),\n/* harmony export */   \"ones\": () => (/* binding */ ones),\n/* harmony export */   \"openArray\": () => (/* binding */ openArray),\n/* harmony export */   \"openGroup\": () => (/* binding */ openGroup),\n/* harmony export */   \"rangeTypedArray\": () => (/* binding */ rangeTypedArray),\n/* harmony export */   \"slice\": () => (/* binding */ slice),\n/* harmony export */   \"sliceIndices\": () => (/* binding */ sliceIndices),\n/* harmony export */   \"zeros\": () => (/* binding */ zeros)\n/* harmony export */ });\nconst registry = new Map();\r\nfunction addCodec(id, importFn) {\r\n    registry.set(id, importFn);\r\n}\r\nasync function getCodec(config) {\r\n    if (!registry.has(config.id)) {\r\n        throw new Error(`Compression codec ${config.id} is not supported by Zarr.js yet.`);\r\n    }\r\n    const codec = await registry.get(config.id)();\r\n    return codec.fromConfig(config);\r\n}\n\nfunction createProxy(mapping) {\r\n    return new Proxy(mapping, {\r\n        set(target, key, value, _receiver) {\r\n            return target.setItem(key, value);\r\n        },\r\n        get(target, key, _receiver) {\r\n            return target.getItem(key);\r\n        },\r\n        deleteProperty(target, key) {\r\n            return target.deleteItem(key);\r\n        },\r\n        has(target, key) {\r\n            return target.containsItem(key);\r\n        }\r\n    });\r\n}\n\nfunction isZarrError(err) {\r\n    return typeof err === 'object' && err !== null && '__zarr__' in err;\r\n}\r\nfunction isKeyError(o) {\r\n    return isZarrError(o) && o.__zarr__ === 'KeyError';\r\n}\r\n// Custom error messages, note we have to patch the prototype of the\r\n// errors to fix `instanceof` calls, see:\r\n// https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\nclass ContainsArrayError extends Error {\r\n    constructor(path) {\r\n        super(`path ${path} contains an array`);\r\n        this.__zarr__ = 'ContainsArrayError';\r\n        Object.setPrototypeOf(this, ContainsArrayError.prototype);\r\n    }\r\n}\r\nclass ContainsGroupError extends Error {\r\n    constructor(path) {\r\n        super(`path ${path} contains a group`);\r\n        this.__zarr__ = 'ContainsGroupError';\r\n        Object.setPrototypeOf(this, ContainsGroupError.prototype);\r\n    }\r\n}\r\nclass ArrayNotFoundError extends Error {\r\n    constructor(path) {\r\n        super(`array not found at path ${path}`);\r\n        this.__zarr__ = 'ArrayNotFoundError';\r\n        Object.setPrototypeOf(this, ArrayNotFoundError.prototype);\r\n    }\r\n}\r\nclass GroupNotFoundError extends Error {\r\n    constructor(path) {\r\n        super(`ground not found at path ${path}`);\r\n        this.__zarr__ = 'GroupNotFoundError';\r\n        Object.setPrototypeOf(this, GroupNotFoundError.prototype);\r\n    }\r\n}\r\nclass PathNotFoundError extends Error {\r\n    constructor(path) {\r\n        super(`nothing not found at path ${path}`);\r\n        this.__zarr__ = 'PathNotFoundError';\r\n        Object.setPrototypeOf(this, PathNotFoundError.prototype);\r\n    }\r\n}\r\nclass PermissionError extends Error {\r\n    constructor(message) {\r\n        super(message);\r\n        this.__zarr__ = 'PermissionError';\r\n        Object.setPrototypeOf(this, PermissionError.prototype);\r\n    }\r\n}\r\nclass KeyError extends Error {\r\n    constructor(key) {\r\n        super(`key ${key} not present`);\r\n        this.__zarr__ = 'KeyError';\r\n        Object.setPrototypeOf(this, KeyError.prototype);\r\n    }\r\n}\r\nclass TooManyIndicesError extends RangeError {\r\n    constructor(selection, shape) {\r\n        super(`too many indices for array; expected ${shape.length}, got ${selection.length}`);\r\n        this.__zarr__ = 'TooManyIndicesError';\r\n        Object.setPrototypeOf(this, TooManyIndicesError.prototype);\r\n    }\r\n}\r\nclass BoundsCheckError extends RangeError {\r\n    constructor(message) {\r\n        super(message);\r\n        this.__zarr__ = 'BoundsCheckError';\r\n        Object.setPrototypeOf(this, BoundsCheckError.prototype);\r\n    }\r\n}\r\nclass InvalidSliceError extends RangeError {\r\n    constructor(from, to, stepSize, reason) {\r\n        super(`slice arguments slice(${from}, ${to}, ${stepSize}) invalid: ${reason}`);\r\n        this.__zarr__ = 'InvalidSliceError';\r\n        Object.setPrototypeOf(this, InvalidSliceError.prototype);\r\n    }\r\n}\r\nclass NegativeStepError extends Error {\r\n    constructor() {\r\n        super(`Negative step size is not supported when indexing.`);\r\n        this.__zarr__ = 'NegativeStepError';\r\n        Object.setPrototypeOf(this, NegativeStepError.prototype);\r\n    }\r\n}\r\nclass ValueError extends Error {\r\n    constructor(message) {\r\n        super(message);\r\n        this.__zarr__ = 'ValueError';\r\n        Object.setPrototypeOf(this, ValueError.prototype);\r\n    }\r\n}\r\nclass HTTPError extends Error {\r\n    constructor(code) {\r\n        super(code);\r\n        this.__zarr__ = 'HTTPError';\r\n        Object.setPrototypeOf(this, HTTPError.prototype);\r\n    }\r\n}\n\nfunction slice(start, stop = undefined, step = null) {\r\n    // tslint:disable-next-line: strict-type-predicates\r\n    if (start === undefined) { // Not possible in typescript\r\n        throw new InvalidSliceError(start, stop, step, \"The first argument must not be undefined\");\r\n    }\r\n    if ((typeof start === \"string\" && start !== \":\") || (typeof stop === \"string\" && stop !== \":\")) { // Note in typescript this will never happen with type checking.\r\n        throw new InvalidSliceError(start, stop, step, \"Arguments can only be integers, \\\":\\\" or null\");\r\n    }\r\n    // slice(5) === slice(null, 5)\r\n    if (stop === undefined) {\r\n        stop = start;\r\n        start = null;\r\n    }\r\n    // if (start !== null && stop !== null && start > stop) {\r\n    //     throw new InvalidSliceError(start, stop, step, \"to is higher than from\");\r\n    // }\r\n    return {\r\n        start: start === \":\" ? null : start,\r\n        stop: stop === \":\" ? null : stop,\r\n        step,\r\n        _slice: true,\r\n    };\r\n}\r\n/**\r\n * Port of adjustIndices\r\n * https://github.com/python/cpython/blob/master/Objects/sliceobject.c#L243\r\n */\r\nfunction adjustIndices(start, stop, step, length) {\r\n    if (start < 0) {\r\n        start += length;\r\n        if (start < 0) {\r\n            start = (step < 0) ? -1 : 0;\r\n        }\r\n    }\r\n    else if (start >= length) {\r\n        start = (step < 0) ? length - 1 : length;\r\n    }\r\n    if (stop < 0) {\r\n        stop += length;\r\n        if (stop < 0) {\r\n            stop = (step < 0) ? -1 : 0;\r\n        }\r\n    }\r\n    else if (stop >= length) {\r\n        stop = (step < 0) ? length - 1 : length;\r\n    }\r\n    if (step < 0) {\r\n        if (stop < start) {\r\n            const length = Math.floor((start - stop - 1) / (-step) + 1);\r\n            return [start, stop, step, length];\r\n        }\r\n    }\r\n    else {\r\n        if (start < stop) {\r\n            const length = Math.floor((stop - start - 1) / step + 1);\r\n            return [start, stop, step, length];\r\n        }\r\n    }\r\n    return [start, stop, step, 0];\r\n}\r\n/**\r\n * Port of slice.indices(n) and PySlice_Unpack\r\n * https://github.com/python/cpython/blob/master/Objects/sliceobject.c#L166\r\n *  https://github.com/python/cpython/blob/master/Objects/sliceobject.c#L198\r\n *\r\n * Behaviour might be slightly different as it's a weird hybrid implementation.\r\n */\r\nfunction sliceIndices(slice, length) {\r\n    let start;\r\n    let stop;\r\n    let step;\r\n    if (slice.step === null) {\r\n        step = 1;\r\n    }\r\n    else {\r\n        step = slice.step;\r\n    }\r\n    if (slice.start === null) {\r\n        start = step < 0 ? Number.MAX_SAFE_INTEGER : 0;\r\n    }\r\n    else {\r\n        start = slice.start;\r\n        if (start < 0) {\r\n            start += length;\r\n        }\r\n    }\r\n    if (slice.stop === null) {\r\n        stop = step < 0 ? -Number.MAX_SAFE_INTEGER : Number.MAX_SAFE_INTEGER;\r\n    }\r\n    else {\r\n        stop = slice.stop;\r\n        if (stop < 0) {\r\n            stop += length;\r\n        }\r\n    }\r\n    // This clips out of bounds slices\r\n    const s = adjustIndices(start, stop, step, length);\r\n    start = s[0];\r\n    stop = s[1];\r\n    step = s[2];\r\n    // The output length\r\n    length = s[3];\r\n    // With out of bounds slicing these two assertions are not useful.\r\n    // if (stop > length) throw new Error(\"Stop greater than length\");\r\n    // if (start >= length) throw new Error(\"Start greater than or equal to length\");\r\n    if (step === 0)\r\n        throw new Error(\"Step size 0 is invalid\");\r\n    return [start, stop, step, length];\r\n}\n\nfunction ensureArray(selection) {\r\n    if (!Array.isArray(selection)) {\r\n        return [selection];\r\n    }\r\n    return selection;\r\n}\r\nfunction checkSelectionLength(selection, shape) {\r\n    if (selection.length > shape.length) {\r\n        throw new TooManyIndicesError(selection, shape);\r\n    }\r\n}\r\n/**\r\n * Returns both the sliceIndices per dimension and the output shape after slicing.\r\n */\r\nfunction selectionToSliceIndices(selection, shape) {\r\n    const sliceIndicesResult = [];\r\n    const outShape = [];\r\n    for (let i = 0; i < selection.length; i++) {\r\n        const s = selection[i];\r\n        if (typeof s === \"number\") {\r\n            sliceIndicesResult.push(s);\r\n        }\r\n        else {\r\n            const x = sliceIndices(s, shape[i]);\r\n            const dimLength = x[3];\r\n            outShape.push(dimLength);\r\n            sliceIndicesResult.push(x);\r\n        }\r\n    }\r\n    return [sliceIndicesResult, outShape];\r\n}\r\n/**\r\n * This translates \"...\", \":\", null into a list of slices or non-negative integer selections of length shape\r\n */\r\nfunction normalizeArraySelection(selection, shape, convertIntegerSelectionToSlices = false) {\r\n    selection = replaceEllipsis(selection, shape);\r\n    for (let i = 0; i < selection.length; i++) {\r\n        const dimSelection = selection[i];\r\n        if (typeof dimSelection === \"number\") {\r\n            if (convertIntegerSelectionToSlices) {\r\n                selection[i] = slice(dimSelection, dimSelection + 1, 1);\r\n            }\r\n            else {\r\n                selection[i] = normalizeIntegerSelection(dimSelection, shape[i]);\r\n            }\r\n        }\r\n        else if (isIntegerArray(dimSelection)) {\r\n            throw new TypeError(\"Integer array selections are not supported (yet)\");\r\n        }\r\n        else if (dimSelection === \":\" || dimSelection === null) {\r\n            selection[i] = slice(null, null, 1);\r\n        }\r\n    }\r\n    return selection;\r\n}\r\nfunction replaceEllipsis(selection, shape) {\r\n    selection = ensureArray(selection);\r\n    let ellipsisIndex = -1;\r\n    let numEllipsis = 0;\r\n    for (let i = 0; i < selection.length; i++) {\r\n        if (selection[i] === \"...\") {\r\n            ellipsisIndex = i;\r\n            numEllipsis += 1;\r\n        }\r\n    }\r\n    if (numEllipsis > 1) {\r\n        throw new RangeError(\"an index can only have a single ellipsis ('...')\");\r\n    }\r\n    if (numEllipsis === 1) {\r\n        // count how many items to left and right of ellipsis\r\n        const numItemsLeft = ellipsisIndex;\r\n        const numItemsRight = selection.length - (numItemsLeft + 1);\r\n        const numItems = selection.length - 1; // All non-ellipsis items\r\n        if (numItems >= shape.length) {\r\n            // Ellipsis does nothing, just remove it\r\n            selection = selection.filter((x) => x !== \"...\");\r\n        }\r\n        else {\r\n            // Replace ellipsis with as many slices are needed for number of dims\r\n            const numNewItems = shape.length - numItems;\r\n            let newItem = selection.slice(0, numItemsLeft).concat(new Array(numNewItems).fill(null));\r\n            if (numItemsRight > 0) {\r\n                newItem = newItem.concat(selection.slice(selection.length - numItemsRight));\r\n            }\r\n            selection = newItem;\r\n        }\r\n    }\r\n    // Fill out selection if not completely specified\r\n    if (selection.length < shape.length) {\r\n        const numMissing = shape.length - selection.length;\r\n        selection = selection.concat(new Array(numMissing).fill(null));\r\n    }\r\n    checkSelectionLength(selection, shape);\r\n    return selection;\r\n}\r\nfunction normalizeIntegerSelection(dimSelection, dimLength) {\r\n    // Note: Maybe we should convert to integer or warn if dimSelection is not an integer\r\n    // handle wraparound\r\n    if (dimSelection < 0) {\r\n        dimSelection = dimLength + dimSelection;\r\n    }\r\n    // handle out of bounds\r\n    if (dimSelection >= dimLength || dimSelection < 0) {\r\n        throw new BoundsCheckError(`index out of bounds for dimension with length ${dimLength}`);\r\n    }\r\n    return dimSelection;\r\n}\r\nfunction isInteger(s) {\r\n    return typeof s === \"number\";\r\n}\r\nfunction isIntegerArray(s) {\r\n    if (!Array.isArray(s)) {\r\n        return false;\r\n    }\r\n    for (const e of s) {\r\n        if (typeof e !== \"number\") {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isSlice(s) {\r\n    if (s !== null && s[\"_slice\"] === true) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isContiguousSlice(s) {\r\n    return isSlice(s) && (s.step === null || s.step === 1);\r\n}\r\nfunction isContiguousSelection(selection) {\r\n    selection = ensureArray(selection);\r\n    for (let i = 0; i < selection.length; i++) {\r\n        const s = selection[i];\r\n        if (!(isIntegerArray(s) || isContiguousSlice(s) || s === \"...\")) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction* product(...iterables) {\r\n    if (iterables.length === 0) {\r\n        return;\r\n    }\r\n    // make a list of iterators from the iterables\r\n    const iterators = iterables.map(it => it());\r\n    const results = iterators.map(it => it.next());\r\n    // Disabled to allow empty inputs\r\n    // if (results.some(r => r.done)) {\r\n    //     throw new Error(\"Input contains an empty iterator.\");\r\n    // }\r\n    for (let i = 0;;) {\r\n        if (results[i].done) {\r\n            // reset the current iterator\r\n            iterators[i] = iterables[i]();\r\n            results[i] = iterators[i].next();\r\n            // advance, and exit if we've reached the end\r\n            if (++i >= iterators.length) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            yield results.map(({ value }) => value);\r\n            i = 0;\r\n        }\r\n        results[i] = iterators[i].next();\r\n    }\r\n}\r\nclass BasicIndexer {\r\n    constructor(selection, array) {\r\n        selection = normalizeArraySelection(selection, array.shape);\r\n        // Setup per-dimension indexers\r\n        this.dimIndexers = [];\r\n        const arrayShape = array.shape;\r\n        for (let i = 0; i < arrayShape.length; i++) {\r\n            let dimSelection = selection[i];\r\n            const dimLength = arrayShape[i];\r\n            const dimChunkLength = array.chunks[i];\r\n            if (dimSelection === null) {\r\n                dimSelection = slice(null);\r\n            }\r\n            if (isInteger(dimSelection)) {\r\n                this.dimIndexers.push(new IntDimIndexer(dimSelection, dimLength, dimChunkLength));\r\n            }\r\n            else if (isSlice(dimSelection)) {\r\n                this.dimIndexers.push(new SliceDimIndexer(dimSelection, dimLength, dimChunkLength));\r\n            }\r\n            else {\r\n                throw new RangeError(`Unspported selection item for basic indexing; expected integer or slice, got ${dimSelection}`);\r\n            }\r\n        }\r\n        this.shape = [];\r\n        for (const d of this.dimIndexers) {\r\n            if (d instanceof SliceDimIndexer) {\r\n                this.shape.push(d.numItems);\r\n            }\r\n        }\r\n        this.dropAxes = null;\r\n    }\r\n    *iter() {\r\n        const dimIndexerIterables = this.dimIndexers.map(x => (() => x.iter()));\r\n        const dimIndexerProduct = product(...dimIndexerIterables);\r\n        for (const dimProjections of dimIndexerProduct) {\r\n            // TODO fix this, I think the product outputs too many combinations\r\n            const chunkCoords = [];\r\n            const chunkSelection = [];\r\n            const outSelection = [];\r\n            for (const p of dimProjections) {\r\n                chunkCoords.push((p).dimChunkIndex);\r\n                chunkSelection.push((p).dimChunkSelection);\r\n                if ((p).dimOutSelection !== null) {\r\n                    outSelection.push((p).dimOutSelection);\r\n                }\r\n            }\r\n            yield {\r\n                chunkCoords,\r\n                chunkSelection,\r\n                outSelection,\r\n            };\r\n        }\r\n    }\r\n}\r\nclass IntDimIndexer {\r\n    constructor(dimSelection, dimLength, dimChunkLength) {\r\n        dimSelection = normalizeIntegerSelection(dimSelection, dimLength);\r\n        this.dimSelection = dimSelection;\r\n        this.dimLength = dimLength;\r\n        this.dimChunkLength = dimChunkLength;\r\n        this.numItems = 1;\r\n    }\r\n    *iter() {\r\n        const dimChunkIndex = Math.floor(this.dimSelection / this.dimChunkLength);\r\n        const dimOffset = dimChunkIndex * this.dimChunkLength;\r\n        const dimChunkSelection = this.dimSelection - dimOffset;\r\n        const dimOutSelection = null;\r\n        yield {\r\n            dimChunkIndex,\r\n            dimChunkSelection,\r\n            dimOutSelection,\r\n        };\r\n    }\r\n}\r\nclass SliceDimIndexer {\r\n    constructor(dimSelection, dimLength, dimChunkLength) {\r\n        // Normalize\r\n        const [start, stop, step] = sliceIndices(dimSelection, dimLength);\r\n        this.start = start;\r\n        this.stop = stop;\r\n        this.step = step;\r\n        if (this.step < 1) {\r\n            throw new NegativeStepError();\r\n        }\r\n        this.dimLength = dimLength;\r\n        this.dimChunkLength = dimChunkLength;\r\n        this.numItems = Math.max(0, Math.ceil((this.stop - this.start) / this.step));\r\n        this.numChunks = Math.ceil(this.dimLength / this.dimChunkLength);\r\n    }\r\n    *iter() {\r\n        const dimChunkIndexFrom = Math.floor(this.start / this.dimChunkLength);\r\n        const dimChunkIndexTo = Math.ceil(this.stop / this.dimChunkLength);\r\n        // Iterate over chunks in range\r\n        for (let dimChunkIndex = dimChunkIndexFrom; dimChunkIndex < dimChunkIndexTo; dimChunkIndex++) {\r\n            // Compute offsets for chunk within overall array\r\n            const dimOffset = dimChunkIndex * this.dimChunkLength;\r\n            const dimLimit = Math.min(this.dimLength, (dimChunkIndex + 1) * this.dimChunkLength);\r\n            // Determine chunk length, accounting for trailing chunk\r\n            const dimChunkLength = dimLimit - dimOffset;\r\n            let dimChunkSelStart;\r\n            let dimChunkSelStop;\r\n            let dimOutOffset;\r\n            if (this.start < dimOffset) {\r\n                // Selection starts before current chunk\r\n                dimChunkSelStart = 0;\r\n                const remainder = (dimOffset - this.start) % this.step;\r\n                if (remainder > 0) {\r\n                    dimChunkSelStart += this.step - remainder;\r\n                }\r\n                // Compute number of previous items, provides offset into output array\r\n                dimOutOffset = Math.ceil((dimOffset - this.start) / this.step);\r\n            }\r\n            else {\r\n                // Selection starts within current chunk\r\n                dimChunkSelStart = this.start - dimOffset;\r\n                dimOutOffset = 0;\r\n            }\r\n            if (this.stop > dimLimit) {\r\n                // Selection ends after current chunk\r\n                dimChunkSelStop = dimChunkLength;\r\n            }\r\n            else {\r\n                // Selection ends within current chunk\r\n                dimChunkSelStop = this.stop - dimOffset;\r\n            }\r\n            const dimChunkSelection = slice(dimChunkSelStart, dimChunkSelStop, this.step);\r\n            const dimChunkNumItems = Math.ceil((dimChunkSelStop - dimChunkSelStart) / this.step);\r\n            const dimOutSelection = slice(dimOutOffset, dimOutOffset + dimChunkNumItems);\r\n            yield {\r\n                dimChunkIndex,\r\n                dimChunkSelection,\r\n                dimOutSelection,\r\n            };\r\n        }\r\n    }\r\n}\n\n/**\r\n * This should be true only if this javascript is getting executed in Node.\r\n */\r\nconst IS_NODE = typeof process !== \"undefined\" && process.versions && process.versions.node;\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction normalizeStoragePath(path) {\r\n    if (path === null) {\r\n        return \"\";\r\n    }\r\n    if (path instanceof String) {\r\n        path = path.valueOf();\r\n    }\r\n    // convert backslash to forward slash\r\n    path = path.replace(/\\\\/g, \"/\");\r\n    // ensure no leading slash\r\n    while (path.length > 0 && path[0] === '/') {\r\n        path = path.slice(1);\r\n    }\r\n    // ensure no trailing slash\r\n    while (path.length > 0 && path[path.length - 1] === '/') {\r\n        path = path.slice(0, path.length - 1);\r\n    }\r\n    // collapse any repeated slashes\r\n    path = path.replace(/\\/\\/+/g, \"/\");\r\n    // don't allow path segments with just '.' or '..'\r\n    const segments = path.split('/');\r\n    for (const s of segments) {\r\n        if (s === \".\" || s === \"..\") {\r\n            throw Error(\"path containing '.' or '..' segment not allowed\");\r\n        }\r\n    }\r\n    return path;\r\n}\r\nfunction normalizeShape(shape) {\r\n    if (typeof shape === \"number\") {\r\n        shape = [shape];\r\n    }\r\n    return shape.map(x => Math.floor(x));\r\n}\r\nfunction normalizeChunks(chunks, shape) {\r\n    // Assume shape is already normalized\r\n    if (chunks === null || chunks === true) {\r\n        throw new Error(\"Chunk guessing is not supported yet\");\r\n    }\r\n    if (chunks === false) {\r\n        return shape;\r\n    }\r\n    if (typeof chunks === \"number\") {\r\n        chunks = [chunks];\r\n    }\r\n    // handle underspecified chunks\r\n    if (chunks.length < shape.length) {\r\n        // assume chunks across remaining dimensions\r\n        chunks = chunks.concat(shape.slice(chunks.length));\r\n    }\r\n    return chunks.map((x, idx) => {\r\n        // handle null or -1 in chunks\r\n        if (x === -1 || x === null) {\r\n            return shape[idx];\r\n        }\r\n        else {\r\n            return Math.floor(x);\r\n        }\r\n    });\r\n}\r\nfunction normalizeOrder(order) {\r\n    order = order.toUpperCase();\r\n    return order;\r\n}\r\nfunction normalizeDtype(dtype) {\r\n    return dtype;\r\n}\r\nfunction normalizeFillValue(fillValue) {\r\n    return fillValue;\r\n}\r\n/**\r\n * Determine whether `item` specifies a complete slice of array with the\r\n *  given `shape`. Used to optimize __setitem__ operations on chunks\r\n * @param item\r\n * @param shape\r\n */\r\nfunction isTotalSlice(item, shape) {\r\n    if (item === null) {\r\n        return true;\r\n    }\r\n    if (!Array.isArray(item)) {\r\n        item = [item];\r\n    }\r\n    for (let i = 0; i < Math.min(item.length, shape.length); i++) {\r\n        const it = item[i];\r\n        if (it === null)\r\n            continue;\r\n        if (isSlice(it)) {\r\n            const s = it;\r\n            const isStepOne = s.step === 1 || s.step === null;\r\n            if (s.start === null && s.stop === null && isStepOne) {\r\n                continue;\r\n            }\r\n            if ((s.stop - s.start) === shape[i] && isStepOne) {\r\n                continue;\r\n            }\r\n            return false;\r\n        }\r\n        return false;\r\n        // } else {\r\n        //     console.error(`isTotalSlice unexpected non-slice, got ${it}`);\r\n        //     return false;\r\n        // }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Checks for === equality of all elements.\r\n */\r\nfunction arrayEquals1D(a, b) {\r\n    if (a.length !== b.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < a.length; i++) {\r\n        if (a[i] !== b[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/*\r\n * Determines \"C\" order strides for a given shape array.\r\n * Strides provide integer steps in each dimention to traverse an ndarray.\r\n *\r\n * NOTE: - These strides here are distinct from numpy.ndarray.strides, which describe actual byte steps.\r\n *       - Strides are assumed to be contiguous, so initial step is 1. Thus, output will always be [XX, XX, 1].\r\n */\r\nfunction getStrides(shape) {\r\n    // adapted from https://github.com/scijs/ndarray/blob/master/ndarray.js#L326-L330\r\n    const ndim = shape.length;\r\n    const strides = Array(ndim);\r\n    let step = 1; // init step\r\n    for (let i = ndim - 1; i >= 0; i--) {\r\n        strides[i] = step;\r\n        step *= shape[i];\r\n    }\r\n    return strides;\r\n}\r\n/**\r\n * Preserves (double) slashes earlier in the path, so this works better\r\n * for URLs. From https://stackoverflow.com/a/46427607/4178400\r\n * @param args parts of a path or URL to join.\r\n */\r\nfunction joinUrlParts(...args) {\r\n    return args.map((part, i) => {\r\n        if (i === 0) {\r\n            return part.trim().replace(/[\\/]*$/g, '');\r\n        }\r\n        else {\r\n            return part.trim().replace(/(^[\\/]*|[\\/]*$)/g, '');\r\n        }\r\n    }).filter(x => x.length).join('/');\r\n}\r\n/**\r\n * Swaps byte order in-place for a given TypedArray.\r\n * Used to flip endian-ness when getting/setting chunks from/to zarr store.\r\n * @param src TypedArray\r\n */\r\nfunction byteSwapInplace(src) {\r\n    const b = src.BYTES_PER_ELEMENT;\r\n    if (b === 1)\r\n        return; // no swapping needed\r\n    if (IS_NODE) {\r\n        // Use builtin methods for swapping if in Node environment\r\n        const bytes = Buffer.from(src.buffer, src.byteOffset, src.length * b);\r\n        if (b === 2)\r\n            bytes.swap16();\r\n        if (b === 4)\r\n            bytes.swap32();\r\n        if (b === 8)\r\n            bytes.swap64();\r\n        return;\r\n    }\r\n    // In browser, need to flip manually\r\n    // Adapted from https://github.com/zbjornson/node-bswap/blob/master/bswap.js\r\n    const flipper = new Uint8Array(src.buffer, src.byteOffset, src.length * b);\r\n    const numFlips = b / 2;\r\n    const endByteIndex = b - 1;\r\n    let t;\r\n    for (let i = 0; i < flipper.length; i += b) {\r\n        for (let j = 0; j < numFlips; j++) {\r\n            t = flipper[i + j];\r\n            flipper[i + j] = flipper[i + endByteIndex - j];\r\n            flipper[i + endByteIndex - j] = t;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Creates a copy of a TypedArray and swaps bytes.\r\n * Used to flip endian-ness when getting/setting chunks from/to zarr store.\r\n * @param src TypedArray\r\n */\r\nfunction byteSwap(src) {\r\n    const copy = src.slice();\r\n    byteSwapInplace(copy);\r\n    return copy;\r\n}\n\nconst ARRAY_META_KEY = \".zarray\";\r\nconst GROUP_META_KEY = \".zgroup\";\r\nconst ATTRS_META_KEY = \".zattrs\";\n\n/**\r\n * Return true if the store contains an array at the given logical path.\r\n */\r\nasync function containsArray(store, path = null) {\r\n    path = normalizeStoragePath(path);\r\n    const prefix = pathToPrefix(path);\r\n    const key = prefix + ARRAY_META_KEY;\r\n    return store.containsItem(key);\r\n}\r\n/**\r\n * Return true if the store contains a group at the given logical path.\r\n */\r\nasync function containsGroup(store, path = null) {\r\n    path = normalizeStoragePath(path);\r\n    const prefix = pathToPrefix(path);\r\n    const key = prefix + GROUP_META_KEY;\r\n    return store.containsItem(key);\r\n}\r\nfunction pathToPrefix(path) {\r\n    // assume path already normalized\r\n    if (path.length > 0) {\r\n        return path + '/';\r\n    }\r\n    return '';\r\n}\r\nasync function requireParentGroup(store, path, chunkStore, overwrite) {\r\n    // Assume path is normalized\r\n    if (path.length === 0) {\r\n        return;\r\n    }\r\n    const segments = path.split(\"/\");\r\n    let p = \"\";\r\n    for (const s of segments.slice(0, segments.length - 1)) {\r\n        p += s;\r\n        if (await containsArray(store, p)) {\r\n            await initGroupMetadata(store, p, overwrite);\r\n        }\r\n        else if (!await containsGroup(store, p)) {\r\n            await initGroupMetadata(store, p);\r\n        }\r\n        p += \"/\";\r\n    }\r\n}\r\nasync function initGroupMetadata(store, path = null, overwrite = false) {\r\n    path = normalizeStoragePath(path);\r\n    // Guard conditions\r\n    if (overwrite) {\r\n        throw Error(\"Group overwriting not implemented yet :(\");\r\n    }\r\n    else if (await containsArray(store, path)) {\r\n        throw new ContainsArrayError(path);\r\n    }\r\n    else if (await containsGroup(store, path)) {\r\n        throw new ContainsGroupError(path);\r\n    }\r\n    const metadata = { zarr_format: 2 };\r\n    const key = pathToPrefix(path) + GROUP_META_KEY;\r\n    await store.setItem(key, JSON.stringify(metadata));\r\n}\r\n/**\r\n *  Initialize a group store. Note that this is a low-level function and there should be no\r\n *  need to call this directly from user code.\r\n */\r\nasync function initGroup(store, path = null, chunkStore = null, overwrite = false) {\r\n    path = normalizeStoragePath(path);\r\n    await requireParentGroup(store, path, chunkStore, overwrite);\r\n    await initGroupMetadata(store, path, overwrite);\r\n}\r\nasync function initArrayMetadata(store, shape, chunks, dtype, path, compressor, fillValue, order, overwrite, chunkStore, filters, dimensionSeparator) {\r\n    // Guard conditions\r\n    if (overwrite) {\r\n        throw Error(\"Array overwriting not implemented yet :(\");\r\n    }\r\n    else if (await containsArray(store, path)) {\r\n        throw new ContainsArrayError(path);\r\n    }\r\n    else if (await containsGroup(store, path)) {\r\n        throw new ContainsGroupError(path);\r\n    }\r\n    // Normalize metadata,  does type checking too.\r\n    dtype = normalizeDtype(dtype);\r\n    shape = normalizeShape(shape);\r\n    chunks = normalizeChunks(chunks, shape);\r\n    order = normalizeOrder(order);\r\n    fillValue = normalizeFillValue(fillValue);\r\n    if (filters !== null && filters.length > 0) {\r\n        throw Error(\"Filters are not supported yet\");\r\n    }\r\n    let serializedFillValue = fillValue;\r\n    if (typeof fillValue === \"number\") {\r\n        if (Number.isNaN(fillValue))\r\n            serializedFillValue = \"NaN\";\r\n        if (Number.POSITIVE_INFINITY === fillValue)\r\n            serializedFillValue = \"Infinity\";\r\n        if (Number.NEGATIVE_INFINITY === fillValue)\r\n            serializedFillValue = \"-Infinity\";\r\n    }\r\n    filters = null;\r\n    const metadata = {\r\n        zarr_format: 2,\r\n        shape: shape,\r\n        chunks: chunks,\r\n        dtype: dtype,\r\n        fill_value: serializedFillValue,\r\n        order: order,\r\n        compressor: compressor,\r\n        filters: filters,\r\n    };\r\n    if (dimensionSeparator) {\r\n        metadata.dimension_separator = dimensionSeparator;\r\n    }\r\n    const metaKey = pathToPrefix(path) + ARRAY_META_KEY;\r\n    await store.setItem(metaKey, JSON.stringify(metadata));\r\n}\r\n/**\r\n *\r\n * Initialize an array store with the given configuration. Note that this is a low-level\r\n * function and there should be no need to call this directly from user code\r\n */\r\nasync function initArray(store, shape, chunks, dtype, path = null, compressor = null, fillValue = null, order = \"C\", overwrite = false, chunkStore = null, filters = null, dimensionSeparator) {\r\n    path = normalizeStoragePath(path);\r\n    await requireParentGroup(store, path, chunkStore, overwrite);\r\n    await initArrayMetadata(store, shape, chunks, dtype, path, compressor, fillValue, order, overwrite, chunkStore, filters, dimensionSeparator);\r\n}\n\nfunction parseMetadata(s) {\r\n    // Here we allow that a store may return an already-parsed metadata object,\r\n    // or a string of JSON that we will parse here. We allow for an already-parsed\r\n    // object to accommodate a consolidated metadata store, where all the metadata for\r\n    // all groups and arrays will already have been parsed from JSON.\r\n    if (typeof s !== 'string') {\r\n        // tslint:disable-next-line: strict-type-predicates\r\n        if (IS_NODE && Buffer.isBuffer(s)) {\r\n            return JSON.parse(s.toString());\r\n        }\r\n        else if (s instanceof ArrayBuffer) {\r\n            const utf8Decoder = new TextDecoder();\r\n            const bytes = new Uint8Array(s);\r\n            return JSON.parse(utf8Decoder.decode(bytes));\r\n        }\r\n        else {\r\n            return s;\r\n        }\r\n    }\r\n    return JSON.parse(s);\r\n}\n\n/**\r\n * Class providing access to user attributes on an array or group. Should not be\r\n * instantiated directly, will be available via the `.attrs` property of an array or\r\n * group.\r\n */\r\nclass Attributes {\r\n    constructor(store, key, readOnly, cache = true) {\r\n        this.store = store;\r\n        this.key = key;\r\n        this.readOnly = readOnly;\r\n        this.cache = cache;\r\n        this.cachedValue = null;\r\n    }\r\n    /**\r\n     * Retrieve all attributes as a JSON object.\r\n     */\r\n    async asObject() {\r\n        if (this.cache && this.cachedValue !== null) {\r\n            return this.cachedValue;\r\n        }\r\n        const o = await this.getNoSync();\r\n        if (this.cache) {\r\n            this.cachedValue = o;\r\n        }\r\n        return o;\r\n    }\r\n    async getNoSync() {\r\n        try {\r\n            const data = await this.store.getItem(this.key);\r\n            // TODO fix typing?\r\n            return parseMetadata(data);\r\n        }\r\n        catch (error) {\r\n            return {};\r\n        }\r\n    }\r\n    async setNoSync(key, value) {\r\n        const d = await this.getNoSync();\r\n        d[key] = value;\r\n        await this.putNoSync(d);\r\n        return true;\r\n    }\r\n    async putNoSync(m) {\r\n        await this.store.setItem(this.key, JSON.stringify(m));\r\n        if (this.cache) {\r\n            this.cachedValue = m;\r\n        }\r\n    }\r\n    async delNoSync(key) {\r\n        const d = await this.getNoSync();\r\n        delete d[key];\r\n        await this.putNoSync(d);\r\n        return true;\r\n    }\r\n    /**\r\n     * Overwrite all attributes with the provided object in a single operation\r\n     */\r\n    async put(d) {\r\n        if (this.readOnly) {\r\n            throw new PermissionError(\"attributes are read-only\");\r\n        }\r\n        return this.putNoSync(d);\r\n    }\r\n    async setItem(key, value) {\r\n        if (this.readOnly) {\r\n            throw new PermissionError(\"attributes are read-only\");\r\n        }\r\n        return this.setNoSync(key, value);\r\n    }\r\n    async getItem(key) {\r\n        return (await this.asObject())[key];\r\n    }\r\n    async deleteItem(key) {\r\n        if (this.readOnly) {\r\n            throw new PermissionError(\"attributes are read-only\");\r\n        }\r\n        return this.delNoSync(key);\r\n    }\r\n    async containsItem(key) {\r\n        return (await this.asObject())[key] !== undefined;\r\n    }\r\n    proxy() {\r\n        return createProxy(this);\r\n    }\r\n}\n\nconst DTYPE_TYPEDARRAY_MAPPING = {\r\n    '|b': Int8Array,\r\n    '|B': Uint8Array,\r\n    '|u1': Uint8Array,\r\n    '|i1': Int8Array,\r\n    '<b': Int8Array,\r\n    '<B': Uint8Array,\r\n    '<u1': Uint8Array,\r\n    '<i1': Int8Array,\r\n    '<u2': Uint16Array,\r\n    '<i2': Int16Array,\r\n    '<u4': Uint32Array,\r\n    '<i4': Int32Array,\r\n    '<f4': Float32Array,\r\n    '<f8': Float64Array,\r\n    '>b': Int8Array,\r\n    '>B': Uint8Array,\r\n    '>u1': Uint8Array,\r\n    '>i1': Int8Array,\r\n    '>u2': Uint16Array,\r\n    '>i2': Int16Array,\r\n    '>u4': Uint32Array,\r\n    '>i4': Int32Array,\r\n    '>f4': Float32Array,\r\n    '>f8': Float64Array\r\n};\r\nfunction getTypedArrayCtr(dtype) {\r\n    const ctr = DTYPE_TYPEDARRAY_MAPPING[dtype];\r\n    if (!ctr) {\r\n        throw Error(`Dtype not recognized or not supported in zarr.js, got ${dtype}.`);\r\n    }\r\n    return ctr;\r\n}\r\n/*\r\n * Called by NestedArray and RawArray constructors only.\r\n * We byte-swap the buffer of a store after decoding\r\n * since TypedArray views are little endian only.\r\n *\r\n * This means NestedArrays and RawArrays will always be little endian,\r\n * unless a numpy-like library comes around and can handle endianess\r\n * for buffer views.\r\n */\r\nfunction getTypedArrayDtypeString(t) {\r\n    // Favour the types below instead of small and big B\r\n    if (t instanceof Uint8Array)\r\n        return '|u1';\r\n    if (t instanceof Int8Array)\r\n        return '|i1';\r\n    if (t instanceof Uint16Array)\r\n        return '<u2';\r\n    if (t instanceof Int16Array)\r\n        return '<i2';\r\n    if (t instanceof Uint32Array)\r\n        return '<u4';\r\n    if (t instanceof Int32Array)\r\n        return '<i4';\r\n    if (t instanceof Float32Array)\r\n        return '<f4';\r\n    if (t instanceof Float64Array)\r\n        return '<f8';\r\n    throw new ValueError('Mapping for TypedArray to Dtypestring not known');\r\n}\n\n/**\r\n * Digs down into the dimensions of given array to find the TypedArray and returns its constructor.\r\n * Better to use sparingly.\r\n */\r\nfunction getNestedArrayConstructor(arr) {\r\n    // TODO fix typing\r\n    // tslint:disable-next-line: strict-type-predicates\r\n    if (arr.byteLength !== undefined) {\r\n        return (arr).constructor;\r\n    }\r\n    return getNestedArrayConstructor(arr[0]);\r\n}\r\n/**\r\n * Returns both the slice result and new output shape\r\n * @param arr NestedArray to slice\r\n * @param shape The shape of the NestedArray\r\n * @param selection\r\n */\r\nfunction sliceNestedArray(arr, shape, selection) {\r\n    // This translates \"...\", \":\", null into a list of slices or integer selections\r\n    const normalizedSelection = normalizeArraySelection(selection, shape);\r\n    const [sliceIndices, outShape] = selectionToSliceIndices(normalizedSelection, shape);\r\n    const outArray = _sliceNestedArray(arr, shape, sliceIndices);\r\n    return [outArray, outShape];\r\n}\r\nfunction _sliceNestedArray(arr, shape, selection) {\r\n    const currentSlice = selection[0];\r\n    // Is this necessary?\r\n    // // This is possible when a slice list is passed shorter than the amount of dimensions\r\n    // // tslint:disable-next-line: strict-type-predicates\r\n    // if (currentSlice === undefined) {\r\n    //     return arr.slice();\r\n    // }\r\n    // When a number is passed that dimension is squeezed\r\n    if (typeof currentSlice === \"number\") {\r\n        // Assume already normalized integer selection here.\r\n        if (shape.length === 1) {\r\n            return arr[currentSlice];\r\n        }\r\n        else {\r\n            return _sliceNestedArray(arr[currentSlice], shape.slice(1), selection.slice(1));\r\n        }\r\n    }\r\n    const [from, to, step, outputSize] = currentSlice;\r\n    if (outputSize === 0) {\r\n        return new (getNestedArrayConstructor(arr))(0);\r\n    }\r\n    if (shape.length === 1) {\r\n        if (step === 1) {\r\n            return arr.slice(from, to);\r\n        }\r\n        const newArrData = new arr.constructor(outputSize);\r\n        for (let i = 0; i < outputSize; i++) {\r\n            newArrData[i] = arr[from + i * step];\r\n        }\r\n        return newArrData;\r\n    }\r\n    let newArr = new Array(outputSize);\r\n    for (let i = 0; i < outputSize; i++) {\r\n        newArr[i] = _sliceNestedArray(arr[from + i * step], shape.slice(1), selection.slice(1));\r\n    }\r\n    // This is necessary to ensure that the return value is a NestedArray if the last dimension is squeezed\r\n    // e.g. shape [2,1] with slice [:, 0] would otherwise result in a list of numbers instead of a valid NestedArray\r\n    if (outputSize > 0 && typeof newArr[0] === \"number\") {\r\n        const typedArrayConstructor = arr[0].constructor;\r\n        newArr = typedArrayConstructor.from(newArr);\r\n    }\r\n    return newArr;\r\n}\r\nfunction setNestedArrayToScalar(dstArr, value, destShape, selection) {\r\n    // This translates \"...\", \":\", null, etc into a list of slices.\r\n    const normalizedSelection = normalizeArraySelection(selection, destShape, true);\r\n    // Above we force the results to be SliceIndicesIndices only, without integer selections making this cast is safe.\r\n    const [sliceIndices, _outShape] = selectionToSliceIndices(normalizedSelection, destShape);\r\n    _setNestedArrayToScalar(dstArr, value, destShape, sliceIndices);\r\n}\r\nfunction setNestedArray(dstArr, sourceArr, destShape, sourceShape, selection) {\r\n    // This translates \"...\", \":\", null, etc into a list of slices.\r\n    const normalizedSelection = normalizeArraySelection(selection, destShape, false);\r\n    const [sliceIndices, outShape] = selectionToSliceIndices(normalizedSelection, destShape);\r\n    // TODO: replace with non stringify equality check\r\n    if (JSON.stringify(outShape) !== JSON.stringify(sourceShape)) {\r\n        throw new ValueError(`Shape mismatch in target and source NestedArray: ${outShape} and ${sourceShape}`);\r\n    }\r\n    _setNestedArray(dstArr, sourceArr, destShape, sliceIndices);\r\n}\r\nfunction _setNestedArray(dstArr, sourceArr, shape, selection) {\r\n    const currentSlice = selection[0];\r\n    if (typeof sourceArr === \"number\") {\r\n        _setNestedArrayToScalar(dstArr, sourceArr, shape, selection.map(x => typeof x === \"number\" ? [x, x + 1, 1, 1] : x));\r\n        return;\r\n    }\r\n    // This dimension is squeezed.\r\n    if (typeof currentSlice === \"number\") {\r\n        _setNestedArray(dstArr[currentSlice], sourceArr, shape.slice(1), selection.slice(1));\r\n        return;\r\n    }\r\n    const [from, _to, step, outputSize] = currentSlice;\r\n    if (shape.length === 1) {\r\n        if (step === 1) {\r\n            dstArr.set(sourceArr, from);\r\n        }\r\n        else {\r\n            for (let i = 0; i < outputSize; i++) {\r\n                dstArr[from + i * step] = (sourceArr)[i];\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    for (let i = 0; i < outputSize; i++) {\r\n        _setNestedArray(dstArr[from + i * step], sourceArr[i], shape.slice(1), selection.slice(1));\r\n    }\r\n}\r\nfunction _setNestedArrayToScalar(dstArr, value, shape, selection) {\r\n    const currentSlice = selection[0];\r\n    const [from, to, step, outputSize] = currentSlice;\r\n    if (shape.length === 1) {\r\n        if (step === 1) {\r\n            dstArr.fill(value, from, to);\r\n        }\r\n        else {\r\n            for (let i = 0; i < outputSize; i++) {\r\n                dstArr[from + i * step] = value;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    for (let i = 0; i < outputSize; i++) {\r\n        _setNestedArrayToScalar(dstArr[from + i * step], value, shape.slice(1), selection.slice(1));\r\n    }\r\n}\r\nfunction flattenNestedArray(arr, shape, constr) {\r\n    if (constr === undefined) {\r\n        constr = getNestedArrayConstructor(arr);\r\n    }\r\n    const size = shape.reduce((x, y) => x * y, 1);\r\n    const outArr = new constr(size);\r\n    _flattenNestedArray(arr, shape, outArr, 0);\r\n    return outArr;\r\n}\r\nfunction _flattenNestedArray(arr, shape, outArr, offset) {\r\n    if (shape.length === 1) {\r\n        // This is only ever reached if called with rank 1 shape, never reached through recursion.\r\n        // We just slice set the array directly from one level above to save some function calls.\r\n        outArr.set(arr, offset);\r\n        return;\r\n    }\r\n    if (shape.length === 2) {\r\n        for (let i = 0; i < shape[0]; i++) {\r\n            outArr.set(arr[i], offset + shape[1] * i);\r\n        }\r\n        return arr;\r\n    }\r\n    const nextShape = shape.slice(1);\r\n    // Small optimization possible here: this can be precomputed for different levels of depth and passed on.\r\n    const mult = nextShape.reduce((x, y) => x * y, 1);\r\n    for (let i = 0; i < shape[0]; i++) {\r\n        _flattenNestedArray(arr[i], nextShape, outArr, offset + mult * i);\r\n    }\r\n    return arr;\r\n}\n\nclass NestedArray {\r\n    constructor(data, shape, dtype) {\r\n        const dataIsTypedArray = data !== null && !!data.BYTES_PER_ELEMENT;\r\n        if (shape === undefined) {\r\n            if (!dataIsTypedArray) {\r\n                throw new ValueError(\"Shape argument is required unless you pass in a TypedArray\");\r\n            }\r\n            shape = [data.length];\r\n        }\r\n        if (dtype === undefined) {\r\n            if (!dataIsTypedArray) {\r\n                throw new ValueError(\"Dtype argument is required unless you pass in a TypedArray\");\r\n            }\r\n            dtype = getTypedArrayDtypeString(data);\r\n        }\r\n        shape = normalizeShape(shape);\r\n        this.shape = shape;\r\n        this.dtype = dtype;\r\n        if (dataIsTypedArray && shape.length !== 1) {\r\n            data = data.buffer;\r\n        }\r\n        // Zero dimension array.. they are a bit weirdly represented now, they will only ever occur internally\r\n        if (this.shape.length === 0) {\r\n            this.data = new (getTypedArrayCtr(dtype))(1);\r\n        }\r\n        else if (\r\n        // tslint:disable-next-line: strict-type-predicates\r\n        (IS_NODE && Buffer.isBuffer(data))\r\n            || data instanceof ArrayBuffer\r\n            || data === null\r\n            || data.toString().startsWith(\"[object ArrayBuffer]\") // Necessary for Node.js for some reason..\r\n        ) {\r\n            // Create from ArrayBuffer or Buffer\r\n            const numShapeElements = shape.reduce((x, y) => x * y, 1);\r\n            if (data === null) {\r\n                data = new ArrayBuffer(numShapeElements * parseInt(dtype[dtype.length - 1], 10));\r\n            }\r\n            const numDataElements = data.byteLength / parseInt(dtype[dtype.length - 1], 10);\r\n            if (numShapeElements !== numDataElements) {\r\n                throw new Error(`Buffer has ${numDataElements} of dtype ${dtype}, shape is too large or small ${shape} (flat=${numShapeElements})`);\r\n            }\r\n            const typeConstructor = getTypedArrayCtr(dtype);\r\n            this.data = createNestedArray(data, typeConstructor, shape);\r\n        }\r\n        else {\r\n            this.data = data;\r\n        }\r\n    }\r\n    get(selection) {\r\n        const [sliceResult, outShape] = sliceNestedArray(this.data, this.shape, selection);\r\n        if (outShape.length === 0) {\r\n            return sliceResult;\r\n        }\r\n        else {\r\n            return new NestedArray(sliceResult, outShape, this.dtype);\r\n        }\r\n    }\r\n    set(selection = null, value) {\r\n        if (selection === null) {\r\n            selection = [slice(null)];\r\n        }\r\n        if (typeof value === \"number\") {\r\n            if (this.shape.length === 0) {\r\n                // Zero dimension array..\r\n                this.data[0] = value;\r\n            }\r\n            else {\r\n                setNestedArrayToScalar(this.data, value, this.shape, selection);\r\n            }\r\n        }\r\n        else {\r\n            setNestedArray(this.data, value.data, this.shape, value.shape, selection);\r\n        }\r\n    }\r\n    flatten() {\r\n        if (this.shape.length === 1) {\r\n            return this.data;\r\n        }\r\n        return flattenNestedArray(this.data, this.shape, getTypedArrayCtr(this.dtype));\r\n    }\r\n    /**\r\n     * Currently only supports a single integer as the size, TODO: support start, stop, step.\r\n     */\r\n    static arange(size, dtype = \"<i4\") {\r\n        const constr = getTypedArrayCtr(dtype);\r\n        const data = rangeTypedArray([size], constr);\r\n        return new NestedArray(data, [size], dtype);\r\n    }\r\n}\r\n/**\r\n * Creates a TypedArray with values 0 through N where N is the product of the shape.\r\n */\r\nfunction rangeTypedArray(shape, tContructor) {\r\n    const size = shape.reduce((x, y) => x * y, 1);\r\n    const data = new tContructor(size);\r\n    data.set([...Array(size).keys()]); // Sets range 0,1,2,3,4,5\r\n    return data;\r\n}\r\n/**\r\n * Creates multi-dimensional (rank > 1) array given input data and shape recursively.\r\n * What it does is create a Array<Array<...<Array<Uint8Array>>> or some other typed array.\r\n * This is for internal use, there should be no need to call this from user code.\r\n * @param data a buffer containing the data for this array.\r\n * @param t constructor for the datatype of choice\r\n * @param shape list of numbers describing the size in each dimension\r\n * @param offset in bytes for this dimension\r\n */\r\nfunction createNestedArray(data, t, shape, offset = 0) {\r\n    if (shape.length === 1) {\r\n        // This is only ever reached if called with rank 1 shape, never reached through recursion.\r\n        // We just slice set the array directly from one level above to save some function calls.\r\n        return new t(data.slice(offset, offset + shape[0] * t.BYTES_PER_ELEMENT));\r\n    }\r\n    const arr = new Array(shape[0]);\r\n    if (shape.length === 2) {\r\n        for (let i = 0; i < shape[0]; i++) {\r\n            arr[i] = new t(data.slice(offset + shape[1] * i * t.BYTES_PER_ELEMENT, offset + shape[1] * (i + 1) * t.BYTES_PER_ELEMENT));\r\n        }\r\n        return arr;\r\n    }\r\n    const nextShape = shape.slice(1);\r\n    // Small optimization possible here: this can be precomputed for different levels of depth and passed on.\r\n    const mult = nextShape.reduce((x, y) => x * y, 1);\r\n    for (let i = 0; i < shape[0]; i++) {\r\n        arr[i] = createNestedArray(data, t, nextShape, offset + mult * i * t.BYTES_PER_ELEMENT);\r\n    }\r\n    return arr;\r\n}\n\nfunction setRawArrayToScalar(dstArr, dstStrides, dstShape, dstSelection, value) {\r\n    // This translates \"...\", \":\", null, etc into a list of slices.\r\n    const normalizedSelection = normalizeArraySelection(dstSelection, dstShape, true);\r\n    const [sliceIndices] = selectionToSliceIndices(normalizedSelection, dstShape);\r\n    // Above we force the results to be SliceIndicesIndices only, without integer selections making this cast is safe.\r\n    _setRawArrayToScalar(value, dstArr, dstStrides, sliceIndices);\r\n}\r\nfunction setRawArray(dstArr, dstStrides, dstShape, dstSelection, sourceArr, sourceStrides, sourceShape) {\r\n    // This translates \"...\", \":\", null, etc into a list of slices.\r\n    const normalizedDstSelection = normalizeArraySelection(dstSelection, dstShape, false);\r\n    const [dstSliceIndices, outShape] = selectionToSliceIndices(normalizedDstSelection, dstShape);\r\n    // TODO: replace with non stringify equality check\r\n    if (JSON.stringify(outShape) !== JSON.stringify(sourceShape)) {\r\n        throw new ValueError(`Shape mismatch in target and source RawArray: ${outShape} and ${sourceShape}`);\r\n    }\r\n    _setRawArray(dstArr, dstStrides, dstSliceIndices, sourceArr, sourceStrides);\r\n}\r\nfunction setRawArrayFromChunkItem(dstArr, dstStrides, dstShape, dstSelection, sourceArr, sourceStrides, sourceShape, sourceSelection) {\r\n    // This translates \"...\", \":\", null, etc into a list of slices.\r\n    const normalizedDstSelection = normalizeArraySelection(dstSelection, dstShape, true);\r\n    // Above we force the results to be dstSliceIndices only, without integer selections making this cast is safe.\r\n    const [dstSliceIndices] = selectionToSliceIndices(normalizedDstSelection, dstShape);\r\n    const normalizedSourceSelection = normalizeArraySelection(sourceSelection, sourceShape, false);\r\n    const [sourceSliceIndicies] = selectionToSliceIndices(normalizedSourceSelection, sourceShape);\r\n    // TODO check to ensure chunk and dest selection are same shape?\r\n    // As is, this only gets called in ZarrArray.getRaw where this condition should be ensured, and check might hinder performance.\r\n    _setRawArrayFromChunkItem(dstArr, dstStrides, dstSliceIndices, sourceArr, sourceStrides, sourceSliceIndicies);\r\n}\r\nfunction _setRawArrayToScalar(value, dstArr, dstStrides, dstSliceIndices) {\r\n    const [currentDstSlice, ...nextDstSliceIndices] = dstSliceIndices;\r\n    const [currentDstStride, ...nextDstStrides] = dstStrides;\r\n    const [from, _to, step, outputSize] = currentDstSlice;\r\n    if (dstStrides.length === 1) {\r\n        if (step === 1 && currentDstStride === 1) {\r\n            dstArr.fill(value, from, from + outputSize);\r\n        }\r\n        else {\r\n            for (let i = 0; i < outputSize; i++) {\r\n                dstArr[currentDstStride * (from + (step * i))] = value;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    for (let i = 0; i < outputSize; i++) {\r\n        _setRawArrayToScalar(value, dstArr.subarray(currentDstStride * (from + (step * i))), nextDstStrides, nextDstSliceIndices);\r\n    }\r\n}\r\nfunction _setRawArray(dstArr, dstStrides, dstSliceIndices, sourceArr, sourceStrides) {\r\n    if (dstSliceIndices.length === 0) {\r\n        dstArr.set(sourceArr);\r\n        return;\r\n    }\r\n    const [currentDstSlice, ...nextDstSliceIndices] = dstSliceIndices;\r\n    const [currentDstStride, ...nextDstStrides] = dstStrides;\r\n    // This dimension is squeezed.\r\n    if (typeof currentDstSlice === \"number\") {\r\n        _setRawArray(dstArr.subarray(currentDstSlice * currentDstStride), nextDstStrides, nextDstSliceIndices, sourceArr, sourceStrides);\r\n        return;\r\n    }\r\n    const [currentSourceStride, ...nextSourceStrides] = sourceStrides;\r\n    const [from, _to, step, outputSize] = currentDstSlice;\r\n    if (dstStrides.length === 1) {\r\n        if (step === 1 && currentDstStride === 1 && currentSourceStride === 1) {\r\n            dstArr.set(sourceArr.subarray(0, outputSize), from);\r\n        }\r\n        else {\r\n            for (let i = 0; i < outputSize; i++) {\r\n                dstArr[currentDstStride * (from + (step * i))] = sourceArr[currentSourceStride * i];\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    for (let i = 0; i < outputSize; i++) {\r\n        // Apply strides as above, using both destination and source-specific strides.\r\n        _setRawArray(dstArr.subarray(currentDstStride * (from + (i * step))), nextDstStrides, nextDstSliceIndices, sourceArr.subarray(currentSourceStride * i), nextSourceStrides);\r\n    }\r\n}\r\nfunction _setRawArrayFromChunkItem(dstArr, dstStrides, dstSliceIndices, sourceArr, sourceStrides, sourceSliceIndices) {\r\n    if (sourceSliceIndices.length === 0) {\r\n        // Case when last source dimension is squeezed\r\n        dstArr.set(sourceArr.subarray(0, dstArr.length));\r\n        return;\r\n    }\r\n    // Get current indicies and strides for both destination and source arrays\r\n    const [currentDstSlice, ...nextDstSliceIndices] = dstSliceIndices;\r\n    const [currentSourceSlice, ...nextSourceSliceIndices] = sourceSliceIndices;\r\n    const [currentDstStride, ...nextDstStrides] = dstStrides;\r\n    const [currentSourceStride, ...nextSourceStrides] = sourceStrides;\r\n    // This source dimension is squeezed\r\n    if (typeof currentSourceSlice === \"number\") {\r\n        /*\r\n        Sets dimension offset for squeezed dimension.\r\n\n        Ex. if 0th dimension is squeezed to 2nd index (numpy : arr[2,i])\r\n\n            sourceArr[stride[0]* 2 + i] --> sourceArr.subarray(stride[0] * 2)[i] (sourceArr[i] in next call)\r\n\n        Thus, subsequent squeezed dims are appended to the source offset.\r\n        */\r\n        _setRawArrayFromChunkItem(\r\n        // Don't update destination offset/slices, just source\r\n        dstArr, dstStrides, dstSliceIndices, sourceArr.subarray(currentSourceStride * currentSourceSlice), nextSourceStrides, nextSourceSliceIndices);\r\n        return;\r\n    }\r\n    const [from, _to, step, outputSize] = currentDstSlice; // just need start and size\r\n    const [sfrom, _sto, sstep, _soutputSize] = currentSourceSlice; // Will always be subset of dst, so don't need output size just start\r\n    if (dstStrides.length === 1 && sourceStrides.length === 1) {\r\n        if (step === 1 && currentDstStride === 1 && sstep === 1 && currentSourceStride === 1) {\r\n            dstArr.set(sourceArr.subarray(sfrom, sfrom + outputSize), from);\r\n        }\r\n        else {\r\n            for (let i = 0; i < outputSize; i++) {\r\n                dstArr[currentDstStride * (from + (step * i))] = sourceArr[currentSourceStride * (sfrom + (sstep * i))];\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    for (let i = 0; i < outputSize; i++) {\r\n        // Apply strides as above, using both destination and source-specific strides.\r\n        _setRawArrayFromChunkItem(dstArr.subarray(currentDstStride * (from + (i * step))), nextDstStrides, nextDstSliceIndices, sourceArr.subarray(currentSourceStride * (sfrom + (i * sstep))), nextSourceStrides, nextSourceSliceIndices);\r\n    }\r\n}\n\nclass RawArray {\r\n    constructor(data, shape, dtype, strides) {\r\n        const dataIsTypedArray = data !== null && !!data.BYTES_PER_ELEMENT;\r\n        if (shape === undefined) {\r\n            if (!dataIsTypedArray) {\r\n                throw new ValueError(\"Shape argument is required unless you pass in a TypedArray\");\r\n            }\r\n            shape = [data.length];\r\n        }\r\n        shape = normalizeShape(shape);\r\n        if (dtype === undefined) {\r\n            if (!dataIsTypedArray) {\r\n                throw new ValueError(\"Dtype argument is required unless you pass in a TypedArray\");\r\n            }\r\n            dtype = getTypedArrayDtypeString(data);\r\n        }\r\n        if (strides === undefined) {\r\n            strides = getStrides(shape);\r\n        }\r\n        this.shape = shape;\r\n        this.dtype = dtype;\r\n        this.strides = strides;\r\n        if (dataIsTypedArray && shape.length !== 1) {\r\n            data = data.buffer;\r\n        }\r\n        // Zero dimension array.. they are a bit weirdly represented now, they will only ever occur internally\r\n        if (this.shape.length === 0) {\r\n            this.data = new (getTypedArrayCtr(dtype))(1);\r\n        }\r\n        else if (\r\n        // tslint:disable-next-line: strict-type-predicates\r\n        (IS_NODE && Buffer.isBuffer(data))\r\n            || data instanceof ArrayBuffer\r\n            || data === null\r\n            || data.toString().startsWith(\"[object ArrayBuffer]\") // Necessary for Node.js for some reason..\r\n        ) {\r\n            // Create from ArrayBuffer or Buffer\r\n            const numShapeElements = shape.reduce((x, y) => x * y, 1);\r\n            if (data === null) {\r\n                data = new ArrayBuffer(numShapeElements * parseInt(dtype[dtype.length - 1], 10));\r\n            }\r\n            const numDataElements = data.byteLength / parseInt(dtype[dtype.length - 1], 10);\r\n            if (numShapeElements !== numDataElements) {\r\n                throw new Error(`Buffer has ${numDataElements} of dtype ${dtype}, shape is too large or small ${shape} (flat=${numShapeElements})`);\r\n            }\r\n            const typeConstructor = getTypedArrayCtr(dtype);\r\n            this.data = new typeConstructor(data);\r\n        }\r\n        else {\r\n            this.data = data;\r\n        }\r\n    }\r\n    set(selection = null, value, chunkSelection) {\r\n        if (selection === null) {\r\n            selection = [slice(null)];\r\n        }\r\n        if (typeof value === \"number\") {\r\n            if (this.shape.length === 0) {\r\n                // Zero dimension array..\r\n                this.data[0] = value;\r\n            }\r\n            else {\r\n                setRawArrayToScalar(this.data, this.strides, this.shape, selection, value);\r\n            }\r\n        }\r\n        else if (value instanceof RawArray && chunkSelection) {\r\n            // Copy directly from decoded chunk to destination array\r\n            setRawArrayFromChunkItem(this.data, this.strides, this.shape, selection, value.data, value.strides, value.shape, chunkSelection);\r\n        }\r\n        else {\r\n            setRawArray(this.data, this.strides, this.shape, selection, value.data, value.strides, value.shape);\r\n        }\r\n    }\r\n}\n\nfunction createCommonjsModule(fn) {\n  var module = { exports: {} };\n\treturn fn(module, module.exports), module.exports;\n}\n\nvar eventemitter3 = createCommonjsModule(function (module) {\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\n{\n  module.exports = EventEmitter;\n}\n});\n\nvar pFinally = (promise, onFinally) => {\n\tonFinally = onFinally || (() => {});\n\n\treturn promise.then(\n\t\tval => new Promise(resolve => {\n\t\t\tresolve(onFinally());\n\t\t}).then(() => val),\n\t\terr => new Promise(resolve => {\n\t\t\tresolve(onFinally());\n\t\t}).then(() => {\n\t\t\tthrow err;\n\t\t})\n\t);\n};\n\nclass TimeoutError extends Error {\n\tconstructor(message) {\n\t\tsuper(message);\n\t\tthis.name = 'TimeoutError';\n\t}\n}\n\nconst pTimeout = (promise, milliseconds, fallback) => new Promise((resolve, reject) => {\n\tif (typeof milliseconds !== 'number' || milliseconds < 0) {\n\t\tthrow new TypeError('Expected `milliseconds` to be a positive number');\n\t}\n\n\tif (milliseconds === Infinity) {\n\t\tresolve(promise);\n\t\treturn;\n\t}\n\n\tconst timer = setTimeout(() => {\n\t\tif (typeof fallback === 'function') {\n\t\t\ttry {\n\t\t\t\tresolve(fallback());\n\t\t\t} catch (error) {\n\t\t\t\treject(error);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = typeof fallback === 'string' ? fallback : `Promise timed out after ${milliseconds} milliseconds`;\n\t\tconst timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);\n\n\t\tif (typeof promise.cancel === 'function') {\n\t\t\tpromise.cancel();\n\t\t}\n\n\t\treject(timeoutError);\n\t}, milliseconds);\n\n\t// TODO: Use native `finally` keyword when targeting Node.js 10\n\tpFinally(\n\t\t// eslint-disable-next-line promise/prefer-await-to-then\n\t\tpromise.then(resolve, reject),\n\t\t() => {\n\t\t\tclearTimeout(timer);\n\t\t}\n\t);\n});\n\nvar pTimeout_1 = pTimeout;\n// TODO: Remove this for the next major release\nvar _default$3 = pTimeout;\n\nvar TimeoutError_1 = TimeoutError;\npTimeout_1.default = _default$3;\npTimeout_1.TimeoutError = TimeoutError_1;\n\n// Port of lower_bound from http://en.cppreference.com/w/cpp/algorithm/lower_bound\n// Used to compute insertion index to keep queue sorted after insertion\nfunction lowerBound(array, value, comparator) {\n    let first = 0;\n    let count = array.length;\n    while (count > 0) {\n        const step = (count / 2) | 0;\n        let it = first + step;\n        if (comparator(array[it], value) <= 0) {\n            first = ++it;\n            count -= step + 1;\n        }\n        else {\n            count = step;\n        }\n    }\n    return first;\n}\nvar _default$2 = lowerBound;\n\nvar lowerBound_1 = /*#__PURE__*/Object.defineProperty({\n\tdefault: _default$2\n}, '__esModule', {value: true});\n\nclass PriorityQueue {\n    constructor() {\n        this._queue = [];\n    }\n    enqueue(run, options) {\n        options = Object.assign({ priority: 0 }, options);\n        const element = {\n            priority: options.priority,\n            run\n        };\n        if (this.size && this._queue[this.size - 1].priority >= options.priority) {\n            this._queue.push(element);\n            return;\n        }\n        const index = lowerBound_1.default(this._queue, element, (a, b) => b.priority - a.priority);\n        this._queue.splice(index, 0, element);\n    }\n    dequeue() {\n        const item = this._queue.shift();\n        return item && item.run;\n    }\n    get size() {\n        return this._queue.length;\n    }\n}\nvar _default$1 = PriorityQueue;\n\nvar priorityQueue = /*#__PURE__*/Object.defineProperty({\n\tdefault: _default$1\n}, '__esModule', {value: true});\n\nconst empty$1 = () => { };\nconst timeoutError = new pTimeout_1.default.TimeoutError();\n/**\nPromise queue with concurrency control.\n*/\nclass PQueue extends eventemitter3 {\n    constructor(options) {\n        super();\n        this._intervalCount = 0;\n        this._intervalEnd = 0;\n        this._pendingCount = 0;\n        this._resolveEmpty = empty$1;\n        this._resolveIdle = empty$1;\n        // eslint-disable-next-line @typescript-eslint/no-object-literal-type-assertion\n        options = Object.assign({ carryoverConcurrencyCount: false, intervalCap: Infinity, interval: 0, concurrency: Infinity, autoStart: true, queueClass: priorityQueue.default }, options\n        // TODO: Remove this `as`.\n        );\n        if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {\n            throw new TypeError(`Expected \\`intervalCap\\` to be a number from 1 and up, got \\`${options.intervalCap}\\` (${typeof options.intervalCap})`);\n        }\n        if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {\n            throw new TypeError(`Expected \\`interval\\` to be a finite number >= 0, got \\`${options.interval}\\` (${typeof options.interval})`);\n        }\n        this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;\n        this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;\n        this._intervalCap = options.intervalCap;\n        this._interval = options.interval;\n        this._queue = new options.queueClass();\n        this._queueClass = options.queueClass;\n        this.concurrency = options.concurrency;\n        this._timeout = options.timeout;\n        this._throwOnTimeout = options.throwOnTimeout === true;\n        this._isPaused = options.autoStart === false;\n    }\n    get _doesIntervalAllowAnother() {\n        return this._isIntervalIgnored || this._intervalCount < this._intervalCap;\n    }\n    get _doesConcurrentAllowAnother() {\n        return this._pendingCount < this._concurrency;\n    }\n    _next() {\n        this._pendingCount--;\n        this._tryToStartAnother();\n    }\n    _resolvePromises() {\n        this._resolveEmpty();\n        this._resolveEmpty = empty$1;\n        if (this._pendingCount === 0) {\n            this._resolveIdle();\n            this._resolveIdle = empty$1;\n        }\n    }\n    _onResumeInterval() {\n        this._onInterval();\n        this._initializeIntervalIfNeeded();\n        this._timeoutId = undefined;\n    }\n    _isIntervalPaused() {\n        const now = Date.now();\n        if (this._intervalId === undefined) {\n            const delay = this._intervalEnd - now;\n            if (delay < 0) {\n                // Act as the interval was done\n                // We don't need to resume it here because it will be resumed on line 160\n                this._intervalCount = (this._carryoverConcurrencyCount) ? this._pendingCount : 0;\n            }\n            else {\n                // Act as the interval is pending\n                if (this._timeoutId === undefined) {\n                    this._timeoutId = setTimeout(() => {\n                        this._onResumeInterval();\n                    }, delay);\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    _tryToStartAnother() {\n        if (this._queue.size === 0) {\n            // We can clear the interval (\"pause\")\n            // Because we can redo it later (\"resume\")\n            if (this._intervalId) {\n                clearInterval(this._intervalId);\n            }\n            this._intervalId = undefined;\n            this._resolvePromises();\n            return false;\n        }\n        if (!this._isPaused) {\n            const canInitializeInterval = !this._isIntervalPaused();\n            if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {\n                this.emit('active');\n                this._queue.dequeue()();\n                if (canInitializeInterval) {\n                    this._initializeIntervalIfNeeded();\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    _initializeIntervalIfNeeded() {\n        if (this._isIntervalIgnored || this._intervalId !== undefined) {\n            return;\n        }\n        this._intervalId = setInterval(() => {\n            this._onInterval();\n        }, this._interval);\n        this._intervalEnd = Date.now() + this._interval;\n    }\n    _onInterval() {\n        if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {\n            clearInterval(this._intervalId);\n            this._intervalId = undefined;\n        }\n        this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;\n        this._processQueue();\n    }\n    /**\n    Executes all queued functions until it reaches the limit.\n    */\n    _processQueue() {\n        // eslint-disable-next-line no-empty\n        while (this._tryToStartAnother()) { }\n    }\n    get concurrency() {\n        return this._concurrency;\n    }\n    set concurrency(newConcurrency) {\n        if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {\n            throw new TypeError(`Expected \\`concurrency\\` to be a number from 1 and up, got \\`${newConcurrency}\\` (${typeof newConcurrency})`);\n        }\n        this._concurrency = newConcurrency;\n        this._processQueue();\n    }\n    /**\n    Adds a sync or async task to the queue. Always returns a promise.\n    */\n    async add(fn, options = {}) {\n        return new Promise((resolve, reject) => {\n            const run = async () => {\n                this._pendingCount++;\n                this._intervalCount++;\n                try {\n                    const operation = (this._timeout === undefined && options.timeout === undefined) ? fn() : pTimeout_1.default(Promise.resolve(fn()), (options.timeout === undefined ? this._timeout : options.timeout), () => {\n                        if (options.throwOnTimeout === undefined ? this._throwOnTimeout : options.throwOnTimeout) {\n                            reject(timeoutError);\n                        }\n                        return undefined;\n                    });\n                    resolve(await operation);\n                }\n                catch (error) {\n                    reject(error);\n                }\n                this._next();\n            };\n            this._queue.enqueue(run, options);\n            this._tryToStartAnother();\n        });\n    }\n    /**\n    Same as `.add()`, but accepts an array of sync or async functions.\n\n    @returns A promise that resolves when all functions are resolved.\n    */\n    async addAll(functions, options) {\n        return Promise.all(functions.map(async (function_) => this.add(function_, options)));\n    }\n    /**\n    Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)\n    */\n    start() {\n        if (!this._isPaused) {\n            return this;\n        }\n        this._isPaused = false;\n        this._processQueue();\n        return this;\n    }\n    /**\n    Put queue execution on hold.\n    */\n    pause() {\n        this._isPaused = true;\n    }\n    /**\n    Clear the queue.\n    */\n    clear() {\n        this._queue = new this._queueClass();\n    }\n    /**\n    Can be called multiple times. Useful if you for example add additional items at a later time.\n\n    @returns A promise that settles when the queue becomes empty.\n    */\n    async onEmpty() {\n        // Instantly resolve if the queue is empty\n        if (this._queue.size === 0) {\n            return;\n        }\n        return new Promise(resolve => {\n            const existingResolve = this._resolveEmpty;\n            this._resolveEmpty = () => {\n                existingResolve();\n                resolve();\n            };\n        });\n    }\n    /**\n    The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.\n\n    @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.\n    */\n    async onIdle() {\n        // Instantly resolve if none pending and if nothing else is queued\n        if (this._pendingCount === 0 && this._queue.size === 0) {\n            return;\n        }\n        return new Promise(resolve => {\n            const existingResolve = this._resolveIdle;\n            this._resolveIdle = () => {\n                existingResolve();\n                resolve();\n            };\n        });\n    }\n    /**\n    Size of the queue.\n    */\n    get size() {\n        return this._queue.size;\n    }\n    /**\n    Number of pending promises.\n    */\n    get pending() {\n        return this._pendingCount;\n    }\n    /**\n    Whether the queue is currently paused.\n    */\n    get isPaused() {\n        return this._isPaused;\n    }\n    /**\n    Set the timeout for future operations.\n    */\n    set timeout(milliseconds) {\n        this._timeout = milliseconds;\n    }\n    get timeout() {\n        return this._timeout;\n    }\n}\nvar _default = PQueue;\n\nclass ZarrArray {\r\n    /**\r\n     * Instantiate an array from an initialized store.\r\n     * @param store Array store, already initialized.\r\n     * @param path Storage path.\r\n     * @param metadata The initial value for the metadata\r\n     * @param readOnly True if array should be protected against modification.\r\n     * @param chunkStore Separate storage for chunks. If not provided, `store` will be used for storage of both chunks and metadata.\r\n     * @param cacheMetadata If true (default), array configuration metadata will be cached for the lifetime of the object.\r\n     * If false, array metadata will be reloaded prior to all data access and modification operations (may incur overhead depending on storage and data access pattern).\r\n     * @param cacheAttrs If true (default), user attributes will be cached for attribute read operations.\r\n     * If false, user attributes are reloaded from the store prior to all attribute read operations.\r\n     */\r\n    constructor(store, path = null, metadata, readOnly = false, chunkStore = null, cacheMetadata = true, cacheAttrs = true) {\r\n        // N.B., expect at this point store is fully initialized with all\r\n        // configuration metadata fully specified and normalized\r\n        this.store = store;\r\n        this._chunkStore = chunkStore;\r\n        this.path = normalizeStoragePath(path);\r\n        this.keyPrefix = pathToPrefix(this.path);\r\n        this.readOnly = readOnly;\r\n        this.cacheMetadata = cacheMetadata;\r\n        this.cacheAttrs = cacheAttrs;\r\n        this.meta = metadata;\r\n        if (this.meta.compressor !== null) {\r\n            this.compressor = getCodec(this.meta.compressor);\r\n        }\r\n        else {\r\n            this.compressor = null;\r\n        }\r\n        const attrKey = this.keyPrefix + ATTRS_META_KEY;\r\n        this.attrs = new Attributes(this.store, attrKey, this.readOnly, cacheAttrs);\r\n    }\r\n    /**\r\n     * A `Store` providing the underlying storage for array chunks.\r\n     */\r\n    get chunkStore() {\r\n        if (this._chunkStore) {\r\n            return this._chunkStore;\r\n        }\r\n        return this.store;\r\n    }\r\n    /**\r\n     * Array name following h5py convention.\r\n     */\r\n    get name() {\r\n        if (this.path.length > 0) {\r\n            if (this.path[0] !== \"/\") {\r\n                return \"/\" + this.path;\r\n            }\r\n            return this.path;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Final component of name.\r\n     */\r\n    get basename() {\r\n        const name = this.name;\r\n        if (name === null) {\r\n            return null;\r\n        }\r\n        const parts = name.split(\"/\");\r\n        return parts[parts.length - 1];\r\n    }\r\n    /**\r\n     * \"A list of integers describing the length of each dimension of the array.\r\n     */\r\n    get shape() {\r\n        // this.refreshMetadata();\r\n        return this.meta.shape;\r\n    }\r\n    /**\r\n     * A list of integers describing the length of each dimension of a chunk of the array.\r\n     */\r\n    get chunks() {\r\n        return this.meta.chunks;\r\n    }\r\n    /**\r\n     * Integer describing how many element a chunk contains\r\n     */\r\n    get chunkSize() {\r\n        return this.chunks.reduce((x, y) => x * y, 1);\r\n    }\r\n    /**\r\n     *  The NumPy data type.\r\n     */\r\n    get dtype() {\r\n        return this.meta.dtype;\r\n    }\r\n    /**\r\n     *  A value used for uninitialized portions of the array.\r\n     */\r\n    get fillValue() {\r\n        const fillTypeValue = this.meta.fill_value;\r\n        // TODO extract into function\r\n        if (fillTypeValue === \"NaN\") {\r\n            return NaN;\r\n        }\r\n        else if (fillTypeValue === \"Infinity\") {\r\n            return Infinity;\r\n        }\r\n        else if (fillTypeValue === \"-Infinity\") {\r\n            return -Infinity;\r\n        }\r\n        return this.meta.fill_value;\r\n    }\r\n    /**\r\n     *  Number of dimensions.\r\n     */\r\n    get nDims() {\r\n        return this.meta.shape.length;\r\n    }\r\n    /**\r\n     *  The total number of elements in the array.\r\n     */\r\n    get size() {\r\n        // this.refreshMetadata()\r\n        return this.meta.shape.reduce((x, y) => x * y, 1);\r\n    }\r\n    get length() {\r\n        return this.shape[0];\r\n    }\r\n    get _chunkDataShape() {\r\n        if (this.shape === []) {\r\n            return [1];\r\n        }\r\n        else {\r\n            const s = [];\r\n            for (let i = 0; i < this.shape.length; i++) {\r\n                s[i] = Math.ceil(this.shape[i] / this.chunks[i]);\r\n            }\r\n            return s;\r\n        }\r\n    }\r\n    /**\r\n     * A tuple of integers describing the number of chunks along each\r\n     * dimension of the array.\r\n     */\r\n    get chunkDataShape() {\r\n        // this.refreshMetadata();\r\n        return this._chunkDataShape;\r\n    }\r\n    /**\r\n     * Total number of chunks.\r\n     */\r\n    get numChunks() {\r\n        // this.refreshMetadata();\r\n        return this.chunkDataShape.reduce((x, y) => x * y, 1);\r\n    }\r\n    /**\r\n     * Instantiate an array from an initialized store.\r\n     * @param store Array store, already initialized.\r\n     * @param path Storage path.\r\n     * @param readOnly True if array should be protected against modification.\r\n     * @param chunkStore Separate storage for chunks. If not provided, `store` will be used for storage of both chunks and metadata.\r\n     * @param cacheMetadata If true (default), array configuration metadata will be cached for the lifetime of the object.\r\n     * If false, array metadata will be reloaded prior to all data access and modification operations (may incur overhead depending on storage and data access pattern).\r\n     * @param cacheAttrs If true (default), user attributes will be cached for attribute read operations.\r\n     * If false, user attributes are reloaded from the store prior to all attribute read operations.\r\n     */\r\n    static async create(store, path = null, readOnly = false, chunkStore = null, cacheMetadata = true, cacheAttrs = true) {\r\n        const metadata = await this.loadMetadataForConstructor(store, path);\r\n        return new ZarrArray(store, path, metadata, readOnly, chunkStore, cacheMetadata, cacheAttrs);\r\n    }\r\n    static async loadMetadataForConstructor(store, path) {\r\n        try {\r\n            path = normalizeStoragePath(path);\r\n            const keyPrefix = pathToPrefix(path);\r\n            const metaStoreValue = await store.getItem(keyPrefix + ARRAY_META_KEY);\r\n            return parseMetadata(metaStoreValue);\r\n        }\r\n        catch (error) {\r\n            if (await containsGroup(store, path)) {\r\n                throw new ContainsGroupError(path !== null && path !== void 0 ? path : '');\r\n            }\r\n            throw new Error(\"Failed to load metadata for ZarrArray:\" + error.toString());\r\n        }\r\n    }\r\n    /**\r\n     * (Re)load metadata from store\r\n     */\r\n    async reloadMetadata() {\r\n        const metaKey = this.keyPrefix + ARRAY_META_KEY;\r\n        const metaStoreValue = this.store.getItem(metaKey);\r\n        this.meta = parseMetadata(await metaStoreValue);\r\n        return this.meta;\r\n    }\r\n    async refreshMetadata() {\r\n        if (!this.cacheMetadata) {\r\n            await this.reloadMetadata();\r\n        }\r\n    }\r\n    get(selection = null, opts = {}) {\r\n        return this.getBasicSelection(selection, false, opts);\r\n    }\r\n    getRaw(selection = null, opts = {}) {\r\n        return this.getBasicSelection(selection, true, opts);\r\n    }\r\n    async getBasicSelection(selection, asRaw = false, { concurrencyLimit = 10, progressCallback } = {}) {\r\n        // Refresh metadata\r\n        if (!this.cacheMetadata) {\r\n            await this.reloadMetadata();\r\n        }\r\n        // Check fields (TODO?)\r\n        if (this.shape === []) {\r\n            throw new Error(\"Shape [] indexing is not supported yet\");\r\n        }\r\n        else {\r\n            return this.getBasicSelectionND(selection, asRaw, concurrencyLimit, progressCallback);\r\n        }\r\n    }\r\n    getBasicSelectionND(selection, asRaw, concurrencyLimit, progressCallback) {\r\n        const indexer = new BasicIndexer(selection, this);\r\n        return this.getSelection(indexer, asRaw, concurrencyLimit, progressCallback);\r\n    }\r\n    async getSelection(indexer, asRaw, concurrencyLimit, progressCallback) {\r\n        // We iterate over all chunks which overlap the selection and thus contain data\r\n        // that needs to be extracted. Each chunk is processed in turn, extracting the\r\n        // necessary data and storing into the correct location in the output array.\r\n        // N.B., it is an important optimisation that we only visit chunks which overlap\r\n        // the selection. This minimises the number of iterations in the main for loop.\r\n        // check fields are sensible (TODO?)\r\n        const outDtype = this.dtype;\r\n        const outShape = indexer.shape;\r\n        const outSize = indexer.shape.reduce((x, y) => x * y, 1);\r\n        if (asRaw && (outSize === this.chunkSize)) {\r\n            // Optimization: if output strided array _is_ chunk exactly,\r\n            // decode directly as new TypedArray and return\r\n            const itr = indexer.iter();\r\n            const proj = itr.next(); // ensure there is only one projection\r\n            if (proj.done === false && itr.next().done === true) {\r\n                const chunkProjection = proj.value;\r\n                const out = await this.decodeDirectToRawArray(chunkProjection, outShape, outSize);\r\n                return out;\r\n            }\r\n        }\r\n        const out = asRaw\r\n            ? new RawArray(null, outShape, outDtype)\r\n            : new NestedArray(null, outShape, outDtype);\r\n        if (outSize === 0) {\r\n            return out;\r\n        }\r\n        // create promise queue with concurrency control\r\n        const queue = new _default({ concurrency: concurrencyLimit });\r\n        if (progressCallback) {\r\n            let progress = 0;\r\n            let queueSize = 0;\r\n            for (const _ of indexer.iter())\r\n                queueSize += 1;\r\n            progressCallback({ progress: 0, queueSize: queueSize });\r\n            for (const proj of indexer.iter()) {\r\n                (async () => {\r\n                    await queue.add(() => this.chunkGetItem(proj.chunkCoords, proj.chunkSelection, out, proj.outSelection, indexer.dropAxes));\r\n                    progress += 1;\r\n                    progressCallback({ progress: progress, queueSize: queueSize });\r\n                })();\r\n            }\r\n        }\r\n        else {\r\n            for (const proj of indexer.iter()) {\r\n                queue.add(() => this.chunkGetItem(proj.chunkCoords, proj.chunkSelection, out, proj.outSelection, indexer.dropAxes));\r\n            }\r\n        }\r\n        // guarantees that all work on queue has finished\r\n        await queue.onIdle();\r\n        // Return scalar instead of zero-dimensional array.\r\n        if (out.shape.length === 0) {\r\n            return out.data[0];\r\n        }\r\n        return out;\r\n    }\r\n    /**\r\n     * Obtain part or whole of a chunk.\r\n     * @param chunkCoords Indices of the chunk.\r\n     * @param chunkSelection Location of region within the chunk to extract.\r\n     * @param out Array to store result in.\r\n     * @param outSelection Location of region within output array to store results in.\r\n     * @param dropAxes Axes to squeeze out of the chunk.\r\n     */\r\n    async chunkGetItem(chunkCoords, chunkSelection, out, outSelection, dropAxes) {\r\n        if (chunkCoords.length !== this._chunkDataShape.length) {\r\n            throw new ValueError(`Inconsistent shapes: chunkCoordsLength: ${chunkCoords.length}, cDataShapeLength: ${this.chunkDataShape.length}`);\r\n        }\r\n        const cKey = this.chunkKey(chunkCoords);\r\n        try {\r\n            const cdata = await this.chunkStore.getItem(cKey);\r\n            const decodedChunk = await this.decodeChunk(cdata);\r\n            if (out instanceof NestedArray) {\r\n                if (isContiguousSelection(outSelection) && isTotalSlice(chunkSelection, this.chunks) && !this.meta.filters) {\r\n                    // Optimization: we want the whole chunk, and the destination is\r\n                    // contiguous, so we can decompress directly from the chunk\r\n                    // into the destination array\r\n                    // TODO check order\r\n                    // TODO filters..\r\n                    out.set(outSelection, this.toNestedArray(decodedChunk));\r\n                    return;\r\n                }\r\n                // Decode chunk\r\n                const chunk = this.toNestedArray(decodedChunk);\r\n                const tmp = chunk.get(chunkSelection);\r\n                if (dropAxes !== null) {\r\n                    throw new Error(\"Drop axes is not supported yet\");\r\n                }\r\n                out.set(outSelection, tmp);\r\n            }\r\n            else {\r\n                /* RawArray\r\n                Copies chunk by index directly into output. Doesn't matter if selection is contiguous\r\n                since store/output are different shapes/strides.\r\n                */\r\n                out.set(outSelection, this.chunkBufferToRawArray(decodedChunk), chunkSelection);\r\n            }\r\n        }\r\n        catch (error) {\r\n            if (isKeyError(error)) {\r\n                // fill with scalar if cKey doesn't exist in store\r\n                if (this.fillValue !== null) {\r\n                    out.set(outSelection, this.fillValue);\r\n                }\r\n            }\r\n            else {\r\n                // Different type of error - rethrow\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n    async getRawChunk(chunkCoords, opts) {\r\n        if (chunkCoords.length !== this.shape.length) {\r\n            throw new Error(`Chunk coordinates ${chunkCoords.join(\".\")} do not correspond to shape ${this.shape}.`);\r\n        }\r\n        try {\r\n            for (let i = 0; i < chunkCoords.length; i++) {\r\n                const dimLength = Math.ceil(this.shape[i] / this.chunks[i]);\r\n                chunkCoords[i] = normalizeIntegerSelection(chunkCoords[i], dimLength);\r\n            }\r\n        }\r\n        catch (error) {\r\n            if (error instanceof BoundsCheckError) {\r\n                throw new BoundsCheckError(`index ${chunkCoords.join(\".\")} is out of bounds for shape: ${this.shape} and chunks ${this.chunks}`);\r\n            }\r\n            else {\r\n                throw error;\r\n            }\r\n        }\r\n        const cKey = this.chunkKey(chunkCoords);\r\n        const cdata = this.chunkStore.getItem(cKey, opts === null || opts === void 0 ? void 0 : opts.storeOptions);\r\n        const buffer = await this.decodeChunk(await cdata);\r\n        const outShape = this.chunks.filter(d => d !== 1); // squeeze chunk dim if 1\r\n        return new RawArray(buffer, outShape, this.dtype);\r\n    }\r\n    chunkKey(chunkCoords) {\r\n        var _a;\r\n        const sep = (_a = this.meta.dimension_separator) !== null && _a !== void 0 ? _a : \".\";\r\n        return this.keyPrefix + chunkCoords.join(sep);\r\n    }\r\n    ensureByteArray(chunkData) {\r\n        if (typeof chunkData === \"string\") {\r\n            return new Uint8Array(Buffer.from(chunkData).buffer);\r\n        }\r\n        return new Uint8Array(chunkData);\r\n    }\r\n    toTypedArray(buffer) {\r\n        return new (getTypedArrayCtr(this.dtype))(buffer);\r\n    }\r\n    toNestedArray(data) {\r\n        const buffer = this.ensureByteArray(data).buffer;\r\n        return new NestedArray(buffer, this.chunks, this.dtype);\r\n    }\r\n    async decodeChunk(chunkData) {\r\n        let bytes = this.ensureByteArray(chunkData);\r\n        if (this.compressor !== null) {\r\n            bytes = await (await this.compressor).decode(bytes);\r\n        }\r\n        if (this.dtype.includes('>')) {\r\n            // Need to flip bytes for Javascript TypedArrays\r\n            // We flip bytes in-place to avoid creating an extra copy of the decoded buffer.\r\n            byteSwapInplace(this.toTypedArray(bytes.buffer));\r\n        }\r\n        // TODO filtering etc\r\n        return bytes.buffer;\r\n    }\r\n    chunkBufferToRawArray(buffer) {\r\n        return new RawArray(buffer, this.chunks, this.dtype);\r\n    }\r\n    async decodeDirectToRawArray({ chunkCoords }, outShape, outSize) {\r\n        const cKey = this.chunkKey(chunkCoords);\r\n        try {\r\n            const cdata = await this.chunkStore.getItem(cKey);\r\n            return new RawArray(await this.decodeChunk(cdata), outShape, this.dtype);\r\n        }\r\n        catch (error) {\r\n            if (isKeyError(error)) {\r\n                // fill with scalar if item doesn't exist\r\n                const data = new (getTypedArrayCtr(this.dtype))(outSize);\r\n                return new RawArray(data.fill(this.fillValue), outShape);\r\n            }\r\n            else {\r\n                // Different type of error - rethrow\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n    async set(selection = null, value, opts = {}) {\r\n        await this.setBasicSelection(selection, value, opts);\r\n    }\r\n    async setBasicSelection(selection, value, { concurrencyLimit = 10, progressCallback } = {}) {\r\n        if (this.readOnly) {\r\n            throw new PermissionError(\"Object is read only\");\r\n        }\r\n        if (!this.cacheMetadata) {\r\n            await this.reloadMetadata();\r\n        }\r\n        if (this.shape === []) {\r\n            throw new Error(\"Shape [] indexing is not supported yet\");\r\n        }\r\n        else {\r\n            await this.setBasicSelectionND(selection, value, concurrencyLimit, progressCallback);\r\n        }\r\n    }\r\n    async setBasicSelectionND(selection, value, concurrencyLimit, progressCallback) {\r\n        const indexer = new BasicIndexer(selection, this);\r\n        await this.setSelection(indexer, value, concurrencyLimit, progressCallback);\r\n    }\r\n    getChunkValue(proj, indexer, value, selectionShape) {\r\n        let chunkValue;\r\n        if (selectionShape === []) {\r\n            chunkValue = value;\r\n        }\r\n        else if (typeof value === \"number\") {\r\n            chunkValue = value;\r\n        }\r\n        else {\r\n            chunkValue = value.get(proj.outSelection);\r\n            // tslint:disable-next-line: strict-type-predicates\r\n            if (indexer.dropAxes !== null) {\r\n                throw new Error(\"Handling drop axes not supported yet\");\r\n            }\r\n        }\r\n        return chunkValue;\r\n    }\r\n    async setSelection(indexer, value, concurrencyLimit, progressCallback) {\r\n        // We iterate over all chunks which overlap the selection and thus contain data\r\n        // that needs to be replaced. Each chunk is processed in turn, extracting the\r\n        // necessary data from the value array and storing into the chunk array.\r\n        // N.B., it is an important optimisation that we only visit chunks which overlap\r\n        // the selection. This minimises the number of iterations in the main for loop.\r\n        // TODO? check fields are sensible\r\n        // Determine indices of chunks overlapping the selection\r\n        const selectionShape = indexer.shape;\r\n        // Check value shape\r\n        if (selectionShape === []) ;\r\n        else if (typeof value === \"number\") ;\r\n        else if (value instanceof NestedArray) {\r\n            // TODO: non stringify equality check\r\n            if (!arrayEquals1D(value.shape, selectionShape)) {\r\n                throw new ValueError(`Shape mismatch in source NestedArray and set selection: ${value.shape} and ${selectionShape}`);\r\n            }\r\n        }\r\n        else {\r\n            // TODO support TypedArrays, buffers, etc\r\n            throw new Error(\"Unknown data type for setting :(\");\r\n        }\r\n        const queue = new _default({ concurrency: concurrencyLimit });\r\n        if (progressCallback) {\r\n            let queueSize = 0;\r\n            for (const _ of indexer.iter())\r\n                queueSize += 1;\r\n            let progress = 0;\r\n            progressCallback({ progress: 0, queueSize: queueSize });\r\n            for (const proj of indexer.iter()) {\r\n                const chunkValue = this.getChunkValue(proj, indexer, value, selectionShape);\r\n                (async () => {\r\n                    await queue.add(() => this.chunkSetItem(proj.chunkCoords, proj.chunkSelection, chunkValue));\r\n                    progress += 1;\r\n                    progressCallback({ progress: progress, queueSize: queueSize });\r\n                })();\r\n            }\r\n        }\r\n        else {\r\n            for (const proj of indexer.iter()) {\r\n                const chunkValue = this.getChunkValue(proj, indexer, value, selectionShape);\r\n                queue.add(() => this.chunkSetItem(proj.chunkCoords, proj.chunkSelection, chunkValue));\r\n            }\r\n        }\r\n        // guarantees that all work on queue has finished\r\n        await queue.onIdle();\r\n    }\r\n    async chunkSetItem(chunkCoords, chunkSelection, value) {\r\n        // Obtain key for chunk storage\r\n        const chunkKey = this.chunkKey(chunkCoords);\r\n        let chunk = null;\r\n        const dtypeConstr = getTypedArrayCtr(this.dtype);\r\n        const chunkSize = this.chunkSize;\r\n        if (isTotalSlice(chunkSelection, this.chunks)) {\r\n            // Totally replace chunk\r\n            // Optimization: we are completely replacing the chunk, so no need\r\n            // to access the existing chunk data\r\n            if (typeof value === \"number\") {\r\n                // TODO get the right type here\r\n                chunk = new dtypeConstr(chunkSize);\r\n                chunk.fill(value);\r\n            }\r\n            else {\r\n                chunk = value.flatten();\r\n            }\r\n        }\r\n        else {\r\n            // partially replace the contents of this chunk\r\n            // Existing chunk data\r\n            let chunkData;\r\n            try {\r\n                // Chunk is initialized if this does not error\r\n                const chunkStoreData = await this.chunkStore.getItem(chunkKey);\r\n                const dBytes = await this.decodeChunk(chunkStoreData);\r\n                chunkData = this.toTypedArray(dBytes);\r\n            }\r\n            catch (error) {\r\n                if (isKeyError(error)) {\r\n                    // Chunk is not initialized\r\n                    chunkData = new dtypeConstr(chunkSize);\r\n                    if (this.fillValue !== null) {\r\n                        chunkData.fill(this.fillValue);\r\n                    }\r\n                }\r\n                else {\r\n                    // Different type of error - rethrow\r\n                    throw error;\r\n                }\r\n            }\r\n            const chunkNestedArray = new NestedArray(chunkData, this.chunks, this.dtype);\r\n            chunkNestedArray.set(chunkSelection, value);\r\n            chunk = chunkNestedArray.flatten();\r\n        }\r\n        const chunkData = await this.encodeChunk(chunk);\r\n        this.chunkStore.setItem(chunkKey, chunkData);\r\n    }\r\n    async encodeChunk(chunk) {\r\n        if (this.dtype.includes('>')) {\r\n            /*\r\n             * If big endian, flip bytes before applying compression and setting store.\r\n             *\r\n             * Here we create a copy (not in-place byteswapping) to avoid flipping the\r\n             * bytes in the buffers of user-created Raw- and NestedArrays.\r\n            */\r\n            chunk = byteSwap(chunk);\r\n        }\r\n        if (this.compressor !== null) {\r\n            const bytes = new Uint8Array(chunk.buffer);\r\n            const cbytes = await (await this.compressor).encode(bytes);\r\n            return cbytes.buffer;\r\n        }\r\n        // TODO: filters, etc\r\n        return chunk.buffer;\r\n    }\r\n}\n\nclass MemoryStore {\r\n    constructor(root = {}) {\r\n        this.root = root;\r\n    }\r\n    proxy() {\r\n        return createProxy(this);\r\n    }\r\n    getParent(item) {\r\n        let parent = this.root;\r\n        const segments = item.split('/');\r\n        // find the parent container\r\n        for (const k of segments.slice(0, segments.length - 1)) {\r\n            parent = parent[k];\r\n            if (!parent) {\r\n                throw Error(item);\r\n            }\r\n            // if not isinstance(parent, self.cls):\r\n            //     raise KeyError(item)\r\n        }\r\n        return [parent, segments[segments.length - 1]];\r\n    }\r\n    requireParent(item) {\r\n        let parent = this.root;\r\n        const segments = item.split('/');\r\n        // require the parent container\r\n        for (const k of segments.slice(0, segments.length - 1)) {\r\n            // TODO: verify correct implementation\r\n            if (parent[k] === undefined) {\r\n                parent[k] = {};\r\n            }\r\n            parent = parent[k];\r\n        }\r\n        return [parent, segments[segments.length - 1]];\r\n    }\r\n    getItem(item) {\r\n        const [parent, key] = this.getParent(item);\r\n        const value = parent[key];\r\n        if (value === undefined) {\r\n            throw new KeyError(item);\r\n        }\r\n        return value;\r\n    }\r\n    setItem(item, value) {\r\n        const [parent, key] = this.requireParent(item);\r\n        parent[key] = value;\r\n        return true;\r\n    }\r\n    deleteItem(item) {\r\n        const [parent, key] = this.getParent(item);\r\n        return delete parent[key];\r\n    }\r\n    containsItem(item) {\r\n        // TODO: more sane implementation\r\n        try {\r\n            return this.getItem(item) !== undefined;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n    keys() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\n\nvar HTTPMethod;\r\n(function (HTTPMethod) {\r\n    HTTPMethod[\"HEAD\"] = \"HEAD\";\r\n    HTTPMethod[\"GET\"] = \"GET\";\r\n    HTTPMethod[\"PUT\"] = \"PUT\";\r\n})(HTTPMethod || (HTTPMethod = {}));\r\nconst DEFAULT_METHODS = [HTTPMethod.HEAD, HTTPMethod.GET, HTTPMethod.PUT];\r\nclass HTTPStore {\r\n    constructor(url, options = {}) {\r\n        this.url = url;\r\n        const { fetchOptions = {}, supportedMethods = DEFAULT_METHODS } = options;\r\n        this.fetchOptions = fetchOptions;\r\n        this.supportedMethods = new Set(supportedMethods);\r\n    }\r\n    keys() {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    async getItem(item, opts) {\r\n        const url = joinUrlParts(this.url, item);\r\n        const value = await fetch(url, { ...this.fetchOptions, ...opts });\r\n        if (value.status === 404) {\r\n            // Item is not found\r\n            throw new KeyError(item);\r\n        }\r\n        else if (value.status !== 200) {\r\n            throw new HTTPError(String(value.status));\r\n        }\r\n        // only decode if 200\r\n        if (IS_NODE) {\r\n            return Buffer.from(await value.arrayBuffer());\r\n        }\r\n        else {\r\n            return value.arrayBuffer(); // Browser\r\n        }\r\n    }\r\n    async setItem(item, value) {\r\n        if (!this.supportedMethods.has(HTTPMethod.PUT)) {\r\n            throw new Error('HTTP PUT no a supported method for store.');\r\n        }\r\n        const url = joinUrlParts(this.url, item);\r\n        if (typeof value === 'string') {\r\n            value = new TextEncoder().encode(value).buffer;\r\n        }\r\n        const set = await fetch(url, { ...this.fetchOptions, method: HTTPMethod.PUT, body: value });\r\n        return set.status.toString()[0] === '2';\r\n    }\r\n    deleteItem(_item) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    async containsItem(item) {\r\n        const url = joinUrlParts(this.url, item);\r\n        // Just check headers if HEAD method supported\r\n        const method = this.supportedMethods.has(HTTPMethod.HEAD) ? HTTPMethod.HEAD : HTTPMethod.GET;\r\n        const value = await fetch(url, { ...this.fetchOptions, method });\r\n        return value.status === 200;\r\n    }\r\n}\n\n/**\r\n *\r\n * @param shape Array shape.\r\n * @param chunks  Chunk shape. If `true`, will be guessed from `shape` and `dtype`. If\r\n *      `false`, will be set to `shape`, i.e., single chunk for the whole array.\r\n *      If an int, the chunk size in each dimension will be given by the value\r\n *      of `chunks`. Default is `true`.\r\n * @param dtype NumPy dtype.\r\n * @param compressor Primary compressor.\r\n * @param fillValue Default value to use for uninitialized portions of the array.\r\n * @param order Memory layout to be used within each chunk.\r\n * @param store Store or path to directory in file system or name of zip file.\r\n * @param overwrite  If True, delete all pre-existing data in `store` at `path` before creating the array.\r\n * @param path Path under which array is stored.\r\n * @param chunkStore Separate storage for chunks. If not provided, `store` will be used for storage of both chunks and metadata.\r\n * @param filters Sequence of filters to use to encode chunk data prior to compression.\r\n * @param cacheMetadata If `true` (default), array configuration metadata will be cached for the\r\n *      lifetime of the object. If `false`, array metadata will be reloaded\r\n *      prior to all data access and modification operations (may incur\r\n *      overhead depending on storage and data access pattern).\r\n * @param cacheAttrs If `true` (default), user attributes will be cached for attribute read\r\n *      operations. If `false`, user attributes are reloaded from the store prior\r\n *      to all attribute read operations.\r\n * @param readOnly `true` if array should be protected against modification, defaults to `false`.\r\n * @param dimensionSeparator if specified, defines an alternate string separator placed between the dimension chunks.\r\n */\r\nasync function create({ shape, chunks = true, dtype = \"<i4\", compressor = null, fillValue = null, order = \"C\", store, overwrite = false, path, chunkStore, filters, cacheMetadata = true, cacheAttrs = true, readOnly = false, dimensionSeparator }) {\r\n    store = normalizeStoreArgument(store);\r\n    await initArray(store, shape, chunks, dtype, path, compressor, fillValue, order, overwrite, chunkStore, filters, dimensionSeparator);\r\n    const z = await ZarrArray.create(store, path, readOnly, chunkStore, cacheMetadata, cacheAttrs);\r\n    return z;\r\n}\r\n/**\r\n * Create an empty array.\r\n */\r\nasync function empty(shape, opts = {}) {\r\n    opts.fillValue = null;\r\n    return create({ shape, ...opts });\r\n}\r\n/**\r\n * Create an array, with zero being used as the default value for\r\n * uninitialized portions of the array.\r\n */\r\nasync function zeros(shape, opts = {}) {\r\n    opts.fillValue = 0;\r\n    return create({ shape, ...opts });\r\n}\r\n/**\r\n * Create an array, with one being used as the default value for\r\n * uninitialized portions of the array.\r\n */\r\nasync function ones(shape, opts = {}) {\r\n    opts.fillValue = 1;\r\n    return create({ shape, ...opts });\r\n}\r\n/**\r\n * Create an array, with `fill_value` being used as the default value for\r\n * uninitialized portions of the array\r\n */\r\nasync function full(shape, fillValue, opts = {}) {\r\n    opts.fillValue = fillValue;\r\n    return create({ shape, ...opts });\r\n}\r\nasync function array(data, opts = {}) {\r\n    // TODO: infer chunks?\r\n    let shape = null;\r\n    if (data instanceof NestedArray) {\r\n        shape = data.shape;\r\n        opts.dtype = opts.dtype === undefined ? data.dtype : opts.dtype;\r\n    }\r\n    else {\r\n        shape = data.byteLength;\r\n        // TODO: infer datatype\r\n    }\r\n    // TODO: support TypedArray\r\n    const wasReadOnly = opts.readOnly === undefined ? false : opts.readOnly;\r\n    opts.readOnly = false;\r\n    const z = await create({ shape, ...opts });\r\n    await z.set(null, data);\r\n    z.readOnly = wasReadOnly;\r\n    return z;\r\n}\r\nasync function openArray({ shape, mode = \"a\", chunks = true, dtype = \"<i4\", compressor = null, fillValue = null, order = \"C\", store, overwrite = false, path = null, chunkStore, filters, cacheMetadata = true, cacheAttrs = true, dimensionSeparator } = {}) {\r\n    store = normalizeStoreArgument(store);\r\n    if (chunkStore === undefined) {\r\n        chunkStore = normalizeStoreArgument(store);\r\n    }\r\n    path = normalizeStoragePath(path);\r\n    if (mode === \"r\" || mode === \"r+\") {\r\n        if (!await containsArray(store, path)) {\r\n            if (await containsGroup(store, path)) {\r\n                throw new ContainsGroupError(path);\r\n            }\r\n            throw new ArrayNotFoundError(path);\r\n        }\r\n    }\r\n    else if (mode === \"w\") {\r\n        if (shape === undefined) {\r\n            throw new ValueError(\"Shape can not be undefined when creating a new array\");\r\n        }\r\n        await initArray(store, shape, chunks, dtype, path, compressor, fillValue, order, overwrite, chunkStore, filters, dimensionSeparator);\r\n    }\r\n    else if (mode === \"a\") {\r\n        if (!await containsArray(store, path)) {\r\n            if (await containsGroup(store, path)) {\r\n                throw new ContainsGroupError(path);\r\n            }\r\n            if (shape === undefined) {\r\n                throw new ValueError(\"Shape can not be undefined when creating a new array\");\r\n            }\r\n            await initArray(store, shape, chunks, dtype, path, compressor, fillValue, order, overwrite, chunkStore, filters, dimensionSeparator);\r\n        }\r\n    }\r\n    else if (mode === \"w-\" || mode === \"x\") {\r\n        if (await containsArray(store, path)) {\r\n            throw new ContainsArrayError(path);\r\n        }\r\n        else if (await containsGroup(store, path)) {\r\n            throw new ContainsGroupError(path);\r\n        }\r\n        else {\r\n            if (shape === undefined) {\r\n                throw new ValueError(\"Shape can not be undefined when creating a new array\");\r\n            }\r\n            await initArray(store, shape, chunks, dtype, path, compressor, fillValue, order, overwrite, chunkStore, filters, dimensionSeparator);\r\n        }\r\n    }\r\n    else {\r\n        throw new ValueError(`Invalid mode argument: ${mode}`);\r\n    }\r\n    const readOnly = mode === \"r\";\r\n    return ZarrArray.create(store, path, readOnly, chunkStore, cacheMetadata, cacheAttrs);\r\n}\r\nfunction normalizeStoreArgument(store) {\r\n    if (store === undefined) {\r\n        return new MemoryStore();\r\n    }\r\n    else if (typeof store === \"string\") {\r\n        return new HTTPStore(store);\r\n    }\r\n    return store;\r\n}\n\nclass Group {\r\n    constructor(store, path = null, metadata, readOnly = false, chunkStore = null, cacheAttrs = true) {\r\n        this.store = store;\r\n        this._chunkStore = chunkStore;\r\n        this.path = normalizeStoragePath(path);\r\n        this.keyPrefix = pathToPrefix(this.path);\r\n        this.readOnly = readOnly;\r\n        this.meta = metadata;\r\n        // Initialize attributes\r\n        const attrKey = this.keyPrefix + ATTRS_META_KEY;\r\n        this.attrs = new Attributes(this.store, attrKey, this.readOnly, cacheAttrs);\r\n    }\r\n    /**\r\n     * Group name following h5py convention.\r\n     */\r\n    get name() {\r\n        if (this.path.length > 0) {\r\n            if (this.path[0] !== \"/\") {\r\n                return \"/\" + this.path;\r\n            }\r\n            return this.path;\r\n        }\r\n        return \"/\";\r\n    }\r\n    /**\r\n     * Final component of name.\r\n     */\r\n    get basename() {\r\n        const parts = this.name.split(\"/\");\r\n        return parts[parts.length - 1];\r\n    }\r\n    /**\r\n     * A `Store` providing the underlying storage for array chunks.\r\n     */\r\n    get chunkStore() {\r\n        if (this._chunkStore) {\r\n            return this._chunkStore;\r\n        }\r\n        return this.store;\r\n    }\r\n    static async create(store, path = null, readOnly = false, chunkStore = null, cacheAttrs = true) {\r\n        const metadata = await this.loadMetadataForConstructor(store, path);\r\n        return new Group(store, path, metadata, readOnly, chunkStore, cacheAttrs);\r\n    }\r\n    static async loadMetadataForConstructor(store, path) {\r\n        path = normalizeStoragePath(path);\r\n        const keyPrefix = pathToPrefix(path);\r\n        try {\r\n            const metaStoreValue = await store.getItem(keyPrefix + GROUP_META_KEY);\r\n            return parseMetadata(metaStoreValue);\r\n        }\r\n        catch (error) {\r\n            if (await containsArray(store, path)) {\r\n                throw new ContainsArrayError(path);\r\n            }\r\n            throw new GroupNotFoundError(path);\r\n        }\r\n    }\r\n    itemPath(item) {\r\n        const absolute = typeof item === \"string\" && item.length > 0 && item[0] === '/';\r\n        const path = normalizeStoragePath(item);\r\n        // Absolute path\r\n        if (!absolute && this.path.length > 0) {\r\n            return this.keyPrefix + path;\r\n        }\r\n        return path;\r\n    }\r\n    /**\r\n     * Create a sub-group.\r\n     */\r\n    async createGroup(name, overwrite = false) {\r\n        if (this.readOnly) {\r\n            throw new PermissionError(\"group is read only\");\r\n        }\r\n        const path = this.itemPath(name);\r\n        await initGroup(this.store, path, this._chunkStore, overwrite);\r\n        return Group.create(this.store, path, this.readOnly, this._chunkStore, this.attrs.cache);\r\n    }\r\n    /**\r\n     * Obtain a sub-group, creating one if it doesn't exist.\r\n     */\r\n    async requireGroup(name, overwrite = false) {\r\n        if (this.readOnly) {\r\n            throw new PermissionError(\"group is read only\");\r\n        }\r\n        const path = this.itemPath(name);\r\n        if (!await containsGroup(this.store, path)) {\r\n            await initGroup(this.store, path, this._chunkStore, overwrite);\r\n        }\r\n        return Group.create(this.store, path, this.readOnly, this._chunkStore, this.attrs.cache);\r\n    }\r\n    getOptsForArrayCreation(name, opts = {}) {\r\n        const path = this.itemPath(name);\r\n        opts.path = path;\r\n        if (opts.cacheAttrs === undefined) {\r\n            opts.cacheAttrs = this.attrs.cache;\r\n        }\r\n        opts.store = this.store;\r\n        opts.chunkStore = this.chunkStore;\r\n        return opts;\r\n    }\r\n    /**\r\n     * Creates an array\r\n     */\r\n    array(name, data, opts, overwrite) {\r\n        if (this.readOnly) {\r\n            throw new PermissionError(\"group is read only\");\r\n        }\r\n        opts = this.getOptsForArrayCreation(name, opts);\r\n        opts.overwrite = overwrite === undefined ? opts.overwrite : overwrite;\r\n        return array(data, opts);\r\n    }\r\n    empty(name, shape, opts = {}) {\r\n        if (this.readOnly) {\r\n            throw new PermissionError(\"group is read only\");\r\n        }\r\n        opts = this.getOptsForArrayCreation(name, opts);\r\n        return empty(shape, opts);\r\n    }\r\n    zeros(name, shape, opts = {}) {\r\n        if (this.readOnly) {\r\n            throw new PermissionError(\"group is read only\");\r\n        }\r\n        opts = this.getOptsForArrayCreation(name, opts);\r\n        return zeros(shape, opts);\r\n    }\r\n    ones(name, shape, opts = {}) {\r\n        if (this.readOnly) {\r\n            throw new PermissionError(\"group is read only\");\r\n        }\r\n        opts = this.getOptsForArrayCreation(name, opts);\r\n        return ones(shape, opts);\r\n    }\r\n    full(name, shape, fillValue, opts = {}) {\r\n        if (this.readOnly) {\r\n            throw new PermissionError(\"group is read only\");\r\n        }\r\n        opts = this.getOptsForArrayCreation(name, opts);\r\n        return full(shape, fillValue, opts);\r\n    }\r\n    createDataset(name, shape, data, opts) {\r\n        if (this.readOnly) {\r\n            throw new PermissionError(\"group is read only\");\r\n        }\r\n        opts = this.getOptsForArrayCreation(name, opts);\r\n        let z;\r\n        if (data === undefined) {\r\n            if (shape === undefined) {\r\n                throw new ValueError(\"Shape must be set if no data is passed to CreateDataset\");\r\n            }\r\n            z = create({ shape, ...opts });\r\n        }\r\n        else {\r\n            z = array(data, opts);\r\n        }\r\n        return z;\r\n    }\r\n    async getItem(item) {\r\n        const path = this.itemPath(item);\r\n        if (await containsArray(this.store, path)) {\r\n            return ZarrArray.create(this.store, path, this.readOnly, this.chunkStore, undefined, this.attrs.cache);\r\n        }\r\n        else if (await containsGroup(this.store, path)) {\r\n            return Group.create(this.store, path, this.readOnly, this._chunkStore, this.attrs.cache);\r\n        }\r\n        throw new KeyError(item);\r\n    }\r\n    async setItem(item, value) {\r\n        await this.array(item, value, {}, true);\r\n        return true;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    async deleteItem(_item) {\r\n        if (this.readOnly) {\r\n            throw new PermissionError(\"group is read only\");\r\n        }\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    async containsItem(item) {\r\n        const path = this.itemPath(item);\r\n        return await containsArray(this.store, path) || containsGroup(this.store, path);\r\n    }\r\n    proxy() {\r\n        return createProxy(this);\r\n    }\r\n}\r\n/**\r\n * Create a group.\r\n * @param store Store or path to directory in file system.\r\n * @param path Group path within store.\r\n * @param chunkStore Separate storage for chunks. If not provided, `store` will be used for storage of both chunks and metadata.\r\n * @param overwrite If `true`, delete any pre-existing data in `store` at `path` before creating the group.\r\n * @param cacheAttrs If `true` (default), user attributes will be cached for attribute read operations.\r\n *   If `false`, user attributes are reloaded from the store prior to all attribute read operations.\r\n */\r\nasync function group(store, path = null, chunkStore, overwrite = false, cacheAttrs = true) {\r\n    store = normalizeStoreArgument(store);\r\n    path = normalizeStoragePath(path);\r\n    if (overwrite || await containsGroup(store)) {\r\n        await initGroup(store, path, chunkStore, overwrite);\r\n    }\r\n    return Group.create(store, path, false, chunkStore, cacheAttrs);\r\n}\r\n/**\r\n * Open a group using file-mode-like semantics.\r\n * @param store Store or path to directory in file system or name of zip file.\r\n * @param path Group path within store.\r\n * @param mode Persistence mode, see `PersistenceMode` type.\r\n * @param chunkStore Store or path to directory in file system or name of zip file.\r\n * @param cacheAttrs If `true` (default), user attributes will be cached for attribute read operations\r\n *   If False, user attributes are reloaded from the store prior to all attribute read operations.\r\n *\r\n */\r\nasync function openGroup(store, path = null, mode = \"a\", chunkStore, cacheAttrs = true) {\r\n    store = normalizeStoreArgument(store);\r\n    if (chunkStore !== undefined) {\r\n        chunkStore = normalizeStoreArgument(store);\r\n    }\r\n    path = normalizeStoragePath(path);\r\n    if (mode === \"r\" || mode === \"r+\") {\r\n        if (!await containsGroup(store, path)) {\r\n            if (await containsArray(store, path)) {\r\n                throw new ContainsArrayError(path);\r\n            }\r\n            throw new GroupNotFoundError(path);\r\n        }\r\n    }\r\n    else if (mode === \"w\") {\r\n        await initGroup(store, path, chunkStore, true);\r\n    }\r\n    else if (mode === \"a\") {\r\n        if (!await containsGroup(store, path)) {\r\n            if (await containsArray(store, path)) {\r\n                throw new ContainsArrayError(path);\r\n            }\r\n            await initGroup(store, path, chunkStore);\r\n        }\r\n    }\r\n    else if (mode === \"w-\" || mode === \"x\") {\r\n        if (await containsArray(store, path)) {\r\n            throw new ContainsArrayError(path);\r\n        }\r\n        else if (await containsGroup(store, path)) {\r\n            throw new ContainsGroupError(path);\r\n        }\r\n        else {\r\n            await initGroup(store, path, chunkStore);\r\n        }\r\n    }\r\n    else {\r\n        throw new ValueError(`Invalid mode argument: ${mode}`);\r\n    }\r\n    const readOnly = mode === \"r\";\r\n    return Group.create(store, path, readOnly, chunkStore, cacheAttrs);\r\n}\n\nclass ObjectStore {\r\n    constructor() {\r\n        this.object = {};\r\n    }\r\n    getItem(item) {\r\n        if (!Object.prototype.hasOwnProperty.call(this.object, item)) {\r\n            throw new KeyError(item);\r\n        }\r\n        return this.object[item];\r\n    }\r\n    setItem(item, value) {\r\n        this.object[item] = value;\r\n        return true;\r\n    }\r\n    deleteItem(item) {\r\n        return delete this.object[item];\r\n    }\r\n    containsItem(item) {\r\n        return Object.prototype.hasOwnProperty.call(this.object, item);\r\n    }\r\n    proxy() {\r\n        return createProxy(this);\r\n    }\r\n    keys() {\r\n        return Object.getOwnPropertyNames(this.object);\r\n    }\r\n}\n\n\n//# sourceMappingURL=core.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/zarr/core.mjs\n");

/***/ }),

/***/ "./node_modules/zarr/zarr.mjs":
/*!************************************!*\
  !*** ./node_modules/zarr/zarr.mjs ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ArrayNotFoundError\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.ArrayNotFoundError),\n/* harmony export */   \"BoundsCheckError\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.BoundsCheckError),\n/* harmony export */   \"ContainsArrayError\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.ContainsArrayError),\n/* harmony export */   \"ContainsGroupError\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.ContainsGroupError),\n/* harmony export */   \"Group\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.Group),\n/* harmony export */   \"GroupNotFoundError\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.GroupNotFoundError),\n/* harmony export */   \"HTTPError\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.HTTPError),\n/* harmony export */   \"HTTPStore\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.HTTPStore),\n/* harmony export */   \"InvalidSliceError\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.InvalidSliceError),\n/* harmony export */   \"KeyError\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.KeyError),\n/* harmony export */   \"MemoryStore\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.MemoryStore),\n/* harmony export */   \"NegativeStepError\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.NegativeStepError),\n/* harmony export */   \"NestedArray\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.NestedArray),\n/* harmony export */   \"ObjectStore\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.ObjectStore),\n/* harmony export */   \"PathNotFoundError\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.PathNotFoundError),\n/* harmony export */   \"PermissionError\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.PermissionError),\n/* harmony export */   \"TooManyIndicesError\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.TooManyIndicesError),\n/* harmony export */   \"ValueError\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.ValueError),\n/* harmony export */   \"ZarrArray\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.ZarrArray),\n/* harmony export */   \"addCodec\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.addCodec),\n/* harmony export */   \"array\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.array),\n/* harmony export */   \"create\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.create),\n/* harmony export */   \"createProxy\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.createProxy),\n/* harmony export */   \"empty\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.empty),\n/* harmony export */   \"full\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.full),\n/* harmony export */   \"getCodec\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.getCodec),\n/* harmony export */   \"getTypedArrayCtr\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.getTypedArrayCtr),\n/* harmony export */   \"getTypedArrayDtypeString\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.getTypedArrayDtypeString),\n/* harmony export */   \"group\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.group),\n/* harmony export */   \"isKeyError\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.isKeyError),\n/* harmony export */   \"normalizeStoreArgument\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.normalizeStoreArgument),\n/* harmony export */   \"ones\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.ones),\n/* harmony export */   \"openArray\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.openArray),\n/* harmony export */   \"openGroup\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.openGroup),\n/* harmony export */   \"rangeTypedArray\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.rangeTypedArray),\n/* harmony export */   \"slice\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.slice),\n/* harmony export */   \"sliceIndices\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.sliceIndices),\n/* harmony export */   \"zeros\": () => (/* reexport safe */ _core_mjs__WEBPACK_IMPORTED_MODULE_0__.zeros)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"./node_modules/zarr/core.mjs\");\n\n\n\n/*! pako 2.0.3 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH    = 3;\nconst MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES       = 30;\n/* number of distance codes */\n\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nconst MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) =>\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) =>\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  const next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nconst copy_block = (s, buf, len, header) =>\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  s.pending_buf.set(s.window.subarray(buf, buf + len), s.pending);\n  s.pending += len;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) =>\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) =>\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let lx = 0;         /* running index in l_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) =>\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) =>\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) =>\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) =>\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let black_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block = (s, buf, stored_len, last) =>\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nconst _tr_flush_block = (s, buf, stored_len, last) =>\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally = (s, dist, lc) =>\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //let out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n};\n\nvar _tr_init_1  = _tr_init;\nvar _tr_stored_block_1 = _tr_stored_block;\nvar _tr_flush_block_1  = _tr_flush_block;\nvar _tr_tally_1 = _tr_tally;\nvar _tr_align_1 = _tr_align;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init: _tr_init$1, _tr_stored_block: _tr_stored_block$1, _tr_flush_block: _tr_flush_block$1, _tr_tally: _tr_tally$1, _tr_align: _tr_align$1 } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK,\n  Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR,\n  Z_DEFAULT_COMPRESSION,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED: Z_FIXED$1, Z_DEFAULT_STRATEGY,\n  Z_UNKNOWN: Z_UNKNOWN$1,\n  Z_DEFLATED\n} = constants;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES$1       = 30;\n/* number of distance codes */\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\nconst MAX_BITS$1  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH$1 = 3;\nconst MAX_MATCH$1 = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH$1 + MIN_MATCH$1 + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE = 42;\nconst EXTRA_STATE = 69;\nconst NAME_STATE = 73;\nconst COMMENT_STATE = 91;\nconst HCRC_STATE = 103;\nconst BUSY_STATE = 113;\nconst FINISH_STATE = 666;\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero$1 = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block$1(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH$1;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH$1 - (strend - scan);\n    scan = strend - MAX_MATCH$1;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH$1) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH$1 - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH$1) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  let max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    const max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n};\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH$1) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH$1) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally$1(s, s.strstart - s.match_start, s.match_length - MIN_MATCH$1);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH$1) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally$1(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH$1 - 1)) ? s.strstart : MIN_MATCH$1 - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH$1) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH$1 - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH$1 && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH$1 - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH$1 && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH$1;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally$1(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH$1);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH$1 - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally$1(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally$1(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH$1 - 1 ? s.strstart : MIN_MATCH$1 - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH$1) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH$1 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH$1 && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH$1;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH$1 - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH$1) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally$1(s, 1, s.match_length - MIN_MATCH$1);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally$1(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally$1(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero$1(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH$1 - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE$1 * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES$1 + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES$1 + 1) * 2);\n  zero$1(this.dyn_ltree);\n  zero$1(this.dyn_dtree);\n  zero$1(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES$1 + 1);  /* heap used to build the Huffman trees */\n  zero$1(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES$1 + 1); //uch depth[2*L_CODES+1];\n  zero$1(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN$1;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  _tr_init$1(s);\n  return Z_OK;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED$1) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH$1 - 1) / MIN_MATCH$1);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n};\n\n\nconst deflate = (strm, flush) => {\n\n  let beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      let header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      let level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    let bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align$1(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block$1(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero$1(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  const status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero$1(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH$1) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH$1 - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH$1 - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH$1 - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH$1 - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2 = deflate;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  let i, out;\n  const len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$1,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION$1,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY$1\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$1) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$1) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$1 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH$1) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$1) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$1;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$1) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1 = Deflate;\nvar deflate_2$1 = deflate$1;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar constants$1 = constants;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_2$1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD = 30;       /* got a data error -- remain here until reset */\nconst TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n  let base_index = 0;\n//  let shoextra;    /* extra bits table to use */\n  let end;                    /* use base and extra for symbol > end */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n  let extra_index = 0;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$2, Z_BLOCK: Z_BLOCK$1, Z_TREES,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2, Z_NEED_DICT, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 1;       /* i: waiting for magic header */\nconst    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 3;       /* i: waiting for modification time (gzip) */\nconst    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 7;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 9;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 10;    /* i: waiting for dictionary check value */\nconst    DICT = 11;      /* waiting for inflateSetDictionary() call */\nconst        TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 14;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 18;   /* i: waiting for code length code lengths */\nconst        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nconst            LEN = 21;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 22;    /* i: waiting for length extra bits */\nconst            DIST = 23;      /* i: waiting for distance code */\nconst            DISTEXT = 24;   /* i: waiting for distance extra bits */\nconst            MATCH = 25;     /* o: waiting for output space to copy string */\nconst            LIT = 26;       /* o: waiting for output space to write literal */\nconst    CHECK = 27;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 29;      /* finished check, done -- remain here until reset */\nconst    BAD$1 = 30;       /* got a data error -- remain here until reset */\nconst    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS$1;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS$1);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS$1);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$2;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$2) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS$1,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS$1, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE$1) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$2;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD$1;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED$2) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD$1;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD$1;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE$1;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED$2) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD$1;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD$1;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD$1;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE$1;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE$1;\n        /* falls through */\n      case TYPE$1:\n        if (flush === Z_BLOCK$1 || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD$1;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD$1;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE$1;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD$1;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES$1, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD$1;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD$1;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD$1;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD$1) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD$1;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS$1, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD$1;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS$1, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD$1;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE$1) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE$1;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD$1;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD$1;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD$1;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD$1;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD$1;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$2;\n        break inf_leave;\n      case BAD$1:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD$1 &&\n                      (state.mode < CHECK || flush !== Z_FINISH$2))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE$1 ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$2) && ret === Z_OK$2) {\n    ret = Z_BUF_ERROR$1;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$2;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$2;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$2;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2 = inflate;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\n*/\n\nvar inflate_1 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_FINISH: Z_FINISH$3,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_MEM_ERROR: Z_MEM_ERROR$1\n} = constants;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK$3) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK$3) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$3 : Z_NO_FLUSH$2;\n\n  // Convert data if needed\n  if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT$1 && dictionary) {\n      status = inflate_1.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK$3) {\n        status = inflate_1.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR$2) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT$1;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END$3 &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1.inflateReset(strm);\n      status = inflate_1.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR$2:\n      case Z_DATA_ERROR$2:\n      case Z_NEED_DICT$1:\n      case Z_MEM_ERROR$1:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END$3) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK$3 && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END$3) {\n      status = inflate_1.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$3) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1 = Inflate;\nvar inflate_2$1 = inflate$1;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip = inflate$1;\nvar constants$2 = constants;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1,\n\tinflate: inflate_2$1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip,\n\tconstants: constants$2\n};\n\nconst { Deflate: Deflate$1, deflate: deflate$2, deflateRaw: deflateRaw$1, gzip: gzip$1 } = deflate_1$1;\n\nconst { Inflate: Inflate$1, inflate: inflate$2, inflateRaw: inflateRaw$1, ungzip: ungzip$1 } = inflate_1$1;\n\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_1$2 = deflate$2;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar Inflate_1$1 = Inflate$1;\nvar inflate_1$2 = inflate$2;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip_1 = ungzip$1;\nvar constants_1 = constants;\n\nvar pako = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_1$2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tInflate: Inflate_1$1,\n\tinflate: inflate_1$2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\nvar _a$2;\nconst GZip = (_a$2 = class GZip {\n        constructor(level = 1) {\n            if (level < 0 || level > 9) {\n                throw new Error('Invalid gzip compression level, it should be between 0 and 9');\n            }\n            this.level = level;\n        }\n        static fromConfig({ level }) {\n            return new GZip(level);\n        }\n        encode(data) {\n            const gzipped = pako.gzip(data, { level: this.level });\n            return gzipped;\n        }\n        decode(data, out) {\n            const uncompressed = pako.ungzip(data);\n            if (out !== undefined) {\n                out.set(uncompressed);\n                return out;\n            }\n            return uncompressed;\n        }\n    },\n    _a$2.codecId = 'gzip',\n    _a$2);\n\nvar _a$1;\nconst Zlib = (_a$1 = class Zlib {\n        constructor(level = 1) {\n            if (level < -1 || level > 9) {\n                throw new Error('Invalid zlib compression level, it should be between -1 and 9');\n            }\n            this.level = level;\n        }\n        static fromConfig({ level }) {\n            return new Zlib(level);\n        }\n        encode(data) {\n            const gzipped = pako.deflate(data, { level: this.level });\n            return gzipped;\n        }\n        decode(data, out) {\n            const uncompressed = pako.inflate(data);\n            if (out !== undefined) {\n                out.set(uncompressed);\n                return out;\n            }\n            return uncompressed;\n        }\n    },\n    _a$1.codecId = 'zlib',\n    _a$1);\n\nconst IS_NODE = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\n// This is for the \"binary\" loader (custom code is ~2x faster than \"atob\")\n// from: https://github.com/evanw/esbuild/blob/150a01844d47127c007c2b1973158d69c560ca21/internal/runtime/runtime.go#L185\nlet __toBinary = IS_NODE\n    ? (base64) => new Uint8Array(Buffer.from(base64, 'base64'))\n    : /* @__PURE__ */ (() => {\n        var table = new Uint8Array(128);\n        for (var i = 0; i < 64; i++)\n            table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;\n        return (base64) => {\n            var n = base64.length;\n            // @ts-ignore\n            var bytes = new Uint8Array((((n - (base64[n - 1] == '=') - (base64[n - 2] == '=')) * 3) / 4) | 0);\n            for (var i = 0, j = 0; i < n;) {\n                var c0 = table[base64.charCodeAt(i++)], c1 = table[base64.charCodeAt(i++)];\n                var c2 = table[base64.charCodeAt(i++)], c3 = table[base64.charCodeAt(i++)];\n                bytes[j++] = (c0 << 2) | (c1 >> 4);\n                bytes[j++] = (c1 << 4) | (c2 >> 2);\n                bytes[j++] = (c2 << 6) | c3;\n            }\n            return bytes;\n        };\n    })();\nfunction initEmscriptenModule(moduleFactory, src) {\n    const wasmBinary = __toBinary(src);\n    return moduleFactory({ noInitialRun: true, wasmBinary });\n}\n\nvar blosc_codec = (function() {\n  typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  \n  return (\nfunction(blosc_codec) {\n  blosc_codec = blosc_codec || {};\n\n\nvar f;f||(f=typeof blosc_codec !== 'undefined' ? blosc_codec : {});var aa,ba;f.ready=new Promise(function(a,b){aa=a;ba=b;});var r={},t;for(t in f)f.hasOwnProperty(t)&&(r[t]=f[t]);var ca=\"./this.program\",da=f.print||console.log.bind(console),u=f.printErr||console.warn.bind(console);for(t in r)r.hasOwnProperty(t)&&(f[t]=r[t]);r=null;f.thisProgram&&(ca=f.thisProgram);var v;f.wasmBinary&&(v=f.wasmBinary);f.noExitRuntime&&(f.noExitRuntime);\n\"object\"!==typeof WebAssembly&&w(\"no native wasm support detected\");var y,ea=!1,fa=\"undefined\"!==typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction ha(a,b,c){var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.subarray&&fa)return fa.decode(a.subarray(b,c));for(d=\"\";b<c;){var e=a[b++];if(e&128){var g=a[b++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|g);else {var k=a[b++]&63;e=224==(e&240)?(e&15)<<12|g<<6|k:(e&7)<<18|g<<12|k<<6|a[b++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023));}}else d+=String.fromCharCode(e);}return d}\nfunction ia(a,b,c){var d=z;if(0<c){c=b+c-1;for(var e=0;e<a.length;++e){var g=a.charCodeAt(e);if(55296<=g&&57343>=g){var k=a.charCodeAt(++e);g=65536+((g&1023)<<10)|k&1023;}if(127>=g){if(b>=c)break;d[b++]=g;}else {if(2047>=g){if(b+1>=c)break;d[b++]=192|g>>6;}else {if(65535>=g){if(b+2>=c)break;d[b++]=224|g>>12;}else {if(b+3>=c)break;d[b++]=240|g>>18;d[b++]=128|g>>12&63;}d[b++]=128|g>>6&63;}d[b++]=128|g&63;}}d[b]=0;}}var ja=\"undefined\"!==typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;\nfunction ka(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&A[c];)++c;c<<=1;if(32<c-a&&ja)return ja.decode(z.subarray(a,c));c=0;for(d=\"\";;){var e=C[a+2*c>>1];if(0==e||c==b/2)return d;++c;d+=String.fromCharCode(e);}}function la(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var e=0;e<c;++e)C[b>>1]=a.charCodeAt(e),b+=2;C[b>>1]=0;return b-d}function ma(a){return 2*a.length}\nfunction na(a,b){for(var c=0,d=\"\";!(c>=b/4);){var e=D[a+4*c>>2];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e);}return d}function oa(a,b,c){void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var e=0;e<a.length;++e){var g=a.charCodeAt(e);if(55296<=g&&57343>=g){var k=a.charCodeAt(++e);g=65536+((g&1023)<<10)|k&1023;}D[b>>2]=g;b+=4;if(b+4>c)break}D[b>>2]=0;return b-d}\nfunction pa(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4;}return b}var E,F,z,C,A,D,G,qa,ra;function sa(a){E=a;f.HEAP8=F=new Int8Array(a);f.HEAP16=C=new Int16Array(a);f.HEAP32=D=new Int32Array(a);f.HEAPU8=z=new Uint8Array(a);f.HEAPU16=A=new Uint16Array(a);f.HEAPU32=G=new Uint32Array(a);f.HEAPF32=qa=new Float32Array(a);f.HEAPF64=ra=new Float64Array(a);}var ta=f.INITIAL_MEMORY||16777216;f.wasmMemory?y=f.wasmMemory:y=new WebAssembly.Memory({initial:ta/65536,maximum:32768});\ny&&(E=y.buffer);ta=E.byteLength;sa(E);var I,ua=[],va=[],wa=[],xa=[];function ya(){var a=f.preRun.shift();ua.unshift(a);}var J=0,K=null;f.preloadedImages={};f.preloadedAudios={};function w(a){if(f.onAbort)f.onAbort(a);u(a);ea=!0;a=new WebAssembly.RuntimeError(\"abort(\"+a+\"). Build with -s ASSERTIONS=1 for more info.\");ba(a);throw a;}function Aa(a){var b=L;return String.prototype.startsWith?b.startsWith(a):0===b.indexOf(a)}function Ba(){return Aa(\"data:application/octet-stream;base64,\")}\nvar L=\"blosc_codec.wasm\";if(!Ba()){var Ca=L;L=f.locateFile?f.locateFile(Ca,\"\"):\"\"+Ca;}function Da(){try{if(v)return new Uint8Array(v);throw \"both async and sync fetching of the wasm failed\";}catch(a){w(a);}}function N(a){for(;0<a.length;){var b=a.shift();if(\"function\"==typeof b)b(f);else {var c=b.T;\"number\"===typeof c?void 0===b.O?I.get(c)():I.get(c)(b.O):c(void 0===b.O?null:b.O);}}}\nfunction Ea(a){this.N=a-16;this.$=function(b){D[this.N+8>>2]=b;};this.X=function(b){D[this.N+0>>2]=b;};this.Y=function(){D[this.N+4>>2]=0;};this.W=function(){F[this.N+12>>0]=0;};this.Z=function(){F[this.N+13>>0]=0;};this.V=function(b,c){this.$(b);this.X(c);this.Y();this.W();this.Z();};}function Fa(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+a);}}var Ga=void 0;\nfunction P(a){for(var b=\"\";z[a];)b+=Ga[z[a++]];return b}var Q={},R={},S={};function Ha(a){if(void 0===a)return \"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?\"_\"+a:a}function Ia(a,b){a=Ha(a);return (new Function(\"body\",\"return function \"+a+'() {\\n    \"use strict\";    return body.apply(this, arguments);\\n};\\n'))(b)}\nfunction Ja(a){var b=Error,c=Ia(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"));});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message};return c}var Ka=void 0;function T(a){throw new Ka(a);}var La=void 0;\nfunction Ma(a,b){function c(h){h=b(h);if(h.length!==d.length)throw new La(\"Mismatched type converter count\");for(var l=0;l<d.length;++l)U(d[l],h[l]);}var d=[];d.forEach(function(h){S[h]=a;});var e=Array(a.length),g=[],k=0;a.forEach(function(h,l){R.hasOwnProperty(h)?e[l]=R[h]:(g.push(h),Q.hasOwnProperty(h)||(Q[h]=[]),Q[h].push(function(){e[l]=R[h];++k;k===g.length&&c(e);}));});0===g.length&&c(e);}\nfunction U(a,b,c){c=c||{};if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var d=b.name;a||T('type \"'+d+'\" must have a positive integer typeid pointer');if(R.hasOwnProperty(a)){if(c.U)return;T(\"Cannot register type '\"+d+\"' twice\");}R[a]=b;delete S[a];Q.hasOwnProperty(a)&&(b=Q[a],delete Q[a],b.forEach(function(e){e();}));}var Na=[],V=[{},{value:void 0},{value:null},{value:!0},{value:!1}];\nfunction Qa(a){4<a&&0===--V[a].P&&(V[a]=void 0,Na.push(a));}function Ra(a){switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:var b=Na.length?Na.pop():V.length;V[b]={P:1,value:a};return b}}function Sa(a){return this.fromWireType(G[a>>2])}function Ta(a){if(null===a)return \"null\";var b=typeof a;return \"object\"===b||\"array\"===b||\"function\"===b?a.toString():\"\"+a}\nfunction Ua(a,b){switch(b){case 2:return function(c){return this.fromWireType(qa[c>>2])};case 3:return function(c){return this.fromWireType(ra[c>>3])};default:throw new TypeError(\"Unknown float type: \"+a);}}function Va(a){var b=Function;if(!(b instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof b+\" which is not a function\");var c=Ia(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}\nfunction Wa(a){for(;a.length;){var b=a.pop();a.pop()(b);}}function Xa(a,b){var c=f;if(void 0===c[a].L){var d=c[a];c[a]=function(){c[a].L.hasOwnProperty(arguments.length)||T(\"Function '\"+b+\"' called with an invalid number of arguments (\"+arguments.length+\") - expects one of (\"+c[a].L+\")!\");return c[a].L[arguments.length].apply(this,arguments)};c[a].L=[];c[a].L[d.S]=d;}}\nfunction Ya(a,b,c){f.hasOwnProperty(a)?((void 0===c||void 0!==f[a].L&&void 0!==f[a].L[c])&&T(\"Cannot register public name '\"+a+\"' twice\"),Xa(a,a),f.hasOwnProperty(c)&&T(\"Cannot register multiple overloads of a function with the same number of arguments (\"+c+\")!\"),f[a].L[c]=b):(f[a]=b,void 0!==c&&(f[a].ba=c));}function Za(a,b){for(var c=[],d=0;d<a;d++)c.push(D[(b>>2)+d]);return c}\nfunction $a(a,b){0<=a.indexOf(\"j\")||w(\"Assertion failed: getDynCaller should only be called with i64 sigs\");var c=[];return function(){c.length=arguments.length;for(var d=0;d<arguments.length;d++)c[d]=arguments[d];var e;-1!=a.indexOf(\"j\")?e=c&&c.length?f[\"dynCall_\"+a].apply(null,[b].concat(c)):f[\"dynCall_\"+a].call(null,b):e=I.get(b).apply(null,c);return e}}\nfunction ab(a,b){a=P(a);var c=-1!=a.indexOf(\"j\")?$a(a,b):I.get(b);\"function\"!==typeof c&&T(\"unknown function pointer with signature \"+a+\": \"+b);return c}var bb=void 0;function cb(a){a=db(a);var b=P(a);W(a);return b}function eb(a,b){function c(g){e[g]||R[g]||(S[g]?S[g].forEach(c):(d.push(g),e[g]=!0));}var d=[],e={};b.forEach(c);throw new bb(a+\": \"+d.map(cb).join([\", \"]));}\nfunction fb(a,b,c){switch(b){case 0:return c?function(d){return F[d]}:function(d){return z[d]};case 1:return c?function(d){return C[d>>1]}:function(d){return A[d>>1]};case 2:return c?function(d){return D[d>>2]}:function(d){return G[d>>2]};default:throw new TypeError(\"Unknown integer type: \"+a);}}var gb={};\nfunction hb(){if(!ib){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"===typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ca||\"./this.program\"},b;for(b in gb)a[b]=gb[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);ib=c;}return ib}for(var ib,jb=[null,[],[]],kb=Array(256),X=0;256>X;++X)kb[X]=String.fromCharCode(X);Ga=kb;Ka=f.BindingError=Ja(\"BindingError\");La=f.InternalError=Ja(\"InternalError\");\nf.count_emval_handles=function(){for(var a=0,b=5;b<V.length;++b)void 0!==V[b]&&++a;return a};f.get_first_emval=function(){for(var a=5;a<V.length;++a)if(void 0!==V[a])return V[a];return null};bb=f.UnboundTypeError=Ja(\"UnboundTypeError\");va.push({T:function(){lb();}});\nvar mb={p:function(a){return Y(a+16)+16},o:function(a,b,c){(new Ea(a)).V(b,c);throw a;},z:function(a,b,c,d,e){var g=Fa(c);b=P(b);U(a,{name:b,fromWireType:function(k){return !!k},toWireType:function(k,h){return h?d:e},argPackAdvance:8,readValueFromPointer:function(k){if(1===c)var h=F;else if(2===c)h=C;else if(4===c)h=D;else throw new TypeError(\"Unknown boolean type size: \"+b);return this.fromWireType(h[k>>g])},M:null});},y:function(a,b){b=P(b);U(a,{name:b,fromWireType:function(c){var d=\nV[c].value;Qa(c);return d},toWireType:function(c,d){return Ra(d)},argPackAdvance:8,readValueFromPointer:Sa,M:null});},h:function(a,b,c){c=Fa(c);b=P(b);U(a,{name:b,fromWireType:function(d){return d},toWireType:function(d,e){if(\"number\"!==typeof e&&\"boolean\"!==typeof e)throw new TypeError('Cannot convert \"'+Ta(e)+'\" to '+this.name);return e},argPackAdvance:8,readValueFromPointer:Ua(b,c),M:null});},e:function(a,b,c,d,e,g){var k=Za(b,c);a=P(a);e=ab(d,e);Ya(a,function(){eb(\"Cannot call \"+a+\" due to unbound types\",\nk);},b-1);Ma(k,function(h){var l=a,n=a;h=[h[0],null].concat(h.slice(1));var p=e,q=h.length;2>q&&T(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");for(var x=null!==h[1]&&!1,B=!1,m=1;m<h.length;++m)if(null!==h[m]&&void 0===h[m].M){B=!0;break}var Oa=\"void\"!==h[0].name,H=\"\",M=\"\";for(m=0;m<q-2;++m)H+=(0!==m?\", \":\"\")+\"arg\"+m,M+=(0!==m?\", \":\"\")+\"arg\"+m+\"Wired\";n=\"return function \"+Ha(n)+\"(\"+H+\") {\\nif (arguments.length !== \"+(q-2)+\") {\\nthrowBindingError('function \"+n+\" called with ' + arguments.length + ' arguments, expected \"+\n(q-2)+\" args!');\\n}\\n\";B&&(n+=\"var destructors = [];\\n\");var Pa=B?\"destructors\":\"null\";H=\"throwBindingError invoker fn runDestructors retType classParam\".split(\" \");p=[T,p,g,Wa,h[0],h[1]];x&&(n+=\"var thisWired = classParam.toWireType(\"+Pa+\", this);\\n\");for(m=0;m<q-2;++m)n+=\"var arg\"+m+\"Wired = argType\"+m+\".toWireType(\"+Pa+\", arg\"+m+\"); // \"+h[m+2].name+\"\\n\",H.push(\"argType\"+m),p.push(h[m+2]);x&&(M=\"thisWired\"+(0<M.length?\", \":\"\")+M);n+=(Oa?\"var rv = \":\"\")+\"invoker(fn\"+(0<M.length?\", \":\"\")+M+\");\\n\";\nif(B)n+=\"runDestructors(destructors);\\n\";else for(m=x?1:2;m<h.length;++m)q=1===m?\"thisWired\":\"arg\"+(m-2)+\"Wired\",null!==h[m].M&&(n+=q+\"_dtor(\"+q+\"); // \"+h[m].name+\"\\n\",H.push(q+\"_dtor\"),p.push(h[m].M));Oa&&(n+=\"var ret = retType.fromWireType(rv);\\nreturn ret;\\n\");H.push(n+\"}\\n\");h=Va(H).apply(null,p);m=b-1;if(!f.hasOwnProperty(l))throw new La(\"Replacing nonexistant public symbol\");void 0!==f[l].L&&void 0!==m?f[l].L[m]=h:(f[l]=h,f[l].S=m);return []});},c:function(a,b,c,d,e){function g(n){return n}b=\nP(b);-1===e&&(e=4294967295);var k=Fa(c);if(0===d){var h=32-8*c;g=function(n){return n<<h>>>h};}var l=-1!=b.indexOf(\"unsigned\");U(a,{name:b,fromWireType:g,toWireType:function(n,p){if(\"number\"!==typeof p&&\"boolean\"!==typeof p)throw new TypeError('Cannot convert \"'+Ta(p)+'\" to '+this.name);if(p<d||p>e)throw new TypeError('Passing a number \"'+Ta(p)+'\" from JS side to C/C++ side to an argument of type \"'+b+'\", which is outside the valid range ['+d+\", \"+e+\"]!\");return l?p>>>0:p|0},argPackAdvance:8,readValueFromPointer:fb(b,\nk,0!==d),M:null});},b:function(a,b,c){function d(g){g>>=2;var k=G;return new e(E,k[g+1],k[g])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][b];c=P(c);U(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{U:!0});},i:function(a,b){b=P(b);var c=\"std::string\"===b;U(a,{name:b,fromWireType:function(d){var e=G[d>>2];if(c)for(var g=d+4,k=0;k<=e;++k){var h=d+4+k;if(k==e||0==z[h]){g=g?ha(z,g,h-g):\"\";if(void 0===l)var l=g;else l+=String.fromCharCode(0),\nl+=g;g=h+1;}}else {l=Array(e);for(k=0;k<e;++k)l[k]=String.fromCharCode(z[d+4+k]);l=l.join(\"\");}W(d);return l},toWireType:function(d,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var g=\"string\"===typeof e;g||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||T(\"Cannot pass non-string to std::string\");var k=(c&&g?function(){for(var n=0,p=0;p<e.length;++p){var q=e.charCodeAt(p);55296<=q&&57343>=q&&(q=65536+((q&1023)<<10)|e.charCodeAt(++p)&1023);127>=q?++n:n=2047>=q?n+\n2:65535>=q?n+3:n+4;}return n}:function(){return e.length})(),h=Y(4+k+1);G[h>>2]=k;if(c&&g)ia(e,h+4,k+1);else if(g)for(g=0;g<k;++g){var l=e.charCodeAt(g);255<l&&(W(h),T(\"String has UTF-16 code units that do not fit in 8 bits\"));z[h+4+g]=l;}else for(g=0;g<k;++g)z[h+4+g]=e[g];null!==d&&d.push(W,h);return h},argPackAdvance:8,readValueFromPointer:Sa,M:function(d){W(d);}});},d:function(a,b,c){c=P(c);if(2===b){var d=ka;var e=la;var g=ma;var k=function(){return A};var h=1;}else 4===b&&(d=na,e=oa,g=pa,k=function(){return G},\nh=2);U(a,{name:c,fromWireType:function(l){for(var n=G[l>>2],p=k(),q,x=l+4,B=0;B<=n;++B){var m=l+4+B*b;if(B==n||0==p[m>>h])x=d(x,m-x),void 0===q?q=x:(q+=String.fromCharCode(0),q+=x),x=m+b;}W(l);return q},toWireType:function(l,n){\"string\"!==typeof n&&T(\"Cannot pass non-string to C++ string type \"+c);var p=g(n),q=Y(4+p+b);G[q>>2]=p>>h;e(n,q+4,p+b);null!==l&&l.push(W,q);return q},argPackAdvance:8,readValueFromPointer:Sa,M:function(l){W(l);}});},A:function(a,b){b=P(b);U(a,{aa:!0,name:b,argPackAdvance:0,fromWireType:function(){},\ntoWireType:function(){}});},n:Qa,x:function(a){4<a&&(V[a].P+=1);},C:function(a,b){var c=R[a];void 0===c&&T(\"_emval_take_value has unknown type \"+cb(a));a=c.readValueFromPointer(b);return Ra(a)},t:function(){w();},r:function(a,b,c){z.copyWithin(a,b,b+c);},s:function(a){a>>>=0;var b=z.length;if(2147483648<a)return !1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);d=Math.max(16777216,a,d);0<d%65536&&(d+=65536-d%65536);a:{try{y.grow(Math.min(2147483648,d)-E.byteLength+65535>>>16);sa(y.buffer);\nvar e=1;break a}catch(g){}e=void 0;}if(e)return !0}return !1},u:function(a,b){var c=0;hb().forEach(function(d,e){var g=b+c;e=D[a+4*e>>2]=g;for(g=0;g<d.length;++g)F[e++>>0]=d.charCodeAt(g);F[e>>0]=0;c+=d.length+1;});return 0},v:function(a,b){var c=hb();D[a>>2]=c.length;var d=0;c.forEach(function(e){d+=e.length+1;});D[b>>2]=d;return 0},w:function(){return 0},q:function(){},g:function(a,b,c,d){for(var e=0,g=0;g<c;g++){for(var k=D[b+8*g>>2],h=D[b+(8*g+4)>>2],l=0;l<h;l++){var n=z[k+l],p=jb[a];0===n||10===n?\n((1===a?da:u)(ha(p,0)),p.length=0):p.push(n);}e+=h;}D[d>>2]=e;return 0},a:y,l:function(){return 0},k:function(){return 0},j:function(){},B:function(){return 6},m:function(){},f:function(){}};\n(function(){function a(e){f.asm=e.exports;I=f.asm.D;J--;f.monitorRunDependencies&&f.monitorRunDependencies(J);0==J&&(K&&(e=K,K=null,e()));}function b(e){a(e.instance);}function c(e){return Promise.resolve().then(Da).then(function(g){return WebAssembly.instantiate(g,d)}).then(e,function(g){u(\"failed to asynchronously prepare wasm: \"+g);w(g);})}var d={a:mb};J++;f.monitorRunDependencies&&f.monitorRunDependencies(J);if(f.instantiateWasm)try{return f.instantiateWasm(d,\na)}catch(e){return u(\"Module.instantiateWasm callback failed with error: \"+e),!1}(function(){return v||\"function\"!==typeof WebAssembly.instantiateStreaming||Ba()||Aa(\"file://\")||\"function\"!==typeof fetch?c(b):fetch(L,{credentials:\"same-origin\"}).then(function(e){return WebAssembly.instantiateStreaming(e,d).then(b,function(g){u(\"wasm streaming compile failed: \"+g);u(\"falling back to ArrayBuffer instantiation\");return c(b)})})})().catch(ba);return {}})();\nvar lb=f.___wasm_call_ctors=function(){return (lb=f.___wasm_call_ctors=f.asm.E).apply(null,arguments)},Y=f._malloc=function(){return (Y=f._malloc=f.asm.F).apply(null,arguments)},W=f._free=function(){return (W=f._free=f.asm.G).apply(null,arguments)},db=f.___getTypeName=function(){return (db=f.___getTypeName=f.asm.H).apply(null,arguments)};f.___embind_register_native_and_builtin_types=function(){return (f.___embind_register_native_and_builtin_types=f.asm.I).apply(null,arguments)};\nf.dynCall_jiiiii=function(){return (f.dynCall_jiiiii=f.asm.J).apply(null,arguments)};f.dynCall_jiji=function(){return (f.dynCall_jiji=f.asm.K).apply(null,arguments)};var Z;K=function nb(){Z||ob();Z||(K=nb);};\nfunction ob(){function a(){if(!Z&&(Z=!0,f.calledRun=!0,!ea)){N(va);N(wa);aa(f);if(f.onRuntimeInitialized)f.onRuntimeInitialized();if(f.postRun)for(\"function\"==typeof f.postRun&&(f.postRun=[f.postRun]);f.postRun.length;){var b=f.postRun.shift();xa.unshift(b);}N(xa);}}if(!(0<J)){if(f.preRun)for(\"function\"==typeof f.preRun&&(f.preRun=[f.preRun]);f.preRun.length;)ya();N(ua);0<J||(f.setStatus?(f.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){f.setStatus(\"\");},1);a();},1)):a());}}\nf.run=ob;if(f.preInit)for(\"function\"==typeof f.preInit&&(f.preInit=[f.preInit]);0<f.preInit.length;)f.preInit.pop()();ob();\n\n\n  return blosc_codec.ready\n}\n);\n})();\n\nvar wasmSrc = \"\";\n\nvar _a;\nvar BloscShuffle;\n(function (BloscShuffle) {\n    BloscShuffle[BloscShuffle[\"NOSHUFFLE\"] = 0] = \"NOSHUFFLE\";\n    BloscShuffle[BloscShuffle[\"SHUFFLE\"] = 1] = \"SHUFFLE\";\n    BloscShuffle[BloscShuffle[\"BITSHUFFLE\"] = 2] = \"BITSHUFFLE\";\n    BloscShuffle[BloscShuffle[\"AUTOSHUFFLE\"] = -1] = \"AUTOSHUFFLE\";\n})(BloscShuffle || (BloscShuffle = {}));\nconst COMPRESSORS = new Set(['blosclz', 'lz4', 'lz4hc', 'snappy', 'zlib', 'zstd']);\nlet emscriptenModule;\nconst Blosc = (_a = class Blosc {\n        constructor(clevel = 5, cname = 'lz4', shuffle = BloscShuffle.SHUFFLE, blocksize = 0) {\n            if (clevel < 0 || clevel > 9) {\n                throw new Error(`Invalid compression level: '${clevel}'. It should be between 0 and 9`);\n            }\n            if (!COMPRESSORS.has(cname)) {\n                throw new Error(`Invalid compressor '${cname}'. Valid compressors include\n        'blosclz', 'lz4', 'lz4hc','snappy', 'zlib', 'zstd'.`);\n            }\n            if (shuffle < -1 || shuffle > 2) {\n                throw new Error(`Invalid shuffle ${shuffle}. Must be one of 0 (NOSHUFFLE),\n        1 (SHUFFLE), 2 (BITSHUFFLE), -1 (AUTOSHUFFLE).`);\n            }\n            this.blocksize = blocksize;\n            this.clevel = clevel;\n            this.cname = cname;\n            this.shuffle = shuffle;\n        }\n        static fromConfig({ blocksize, clevel, cname, shuffle }) {\n            return new Blosc(clevel, cname, shuffle, blocksize);\n        }\n        async encode(data) {\n            if (!emscriptenModule) {\n                emscriptenModule = initEmscriptenModule(blosc_codec, wasmSrc);\n            }\n            const module = await emscriptenModule;\n            const view = module.compress(data, this.cname, this.clevel, this.shuffle, this.blocksize);\n            const result = new Uint8Array(view); // Copy view and free wasm memory\n            module.free_result();\n            return result;\n        }\n        async decode(data, out) {\n            if (!emscriptenModule) {\n                emscriptenModule = initEmscriptenModule(blosc_codec, wasmSrc);\n            }\n            const module = await emscriptenModule;\n            const view = module.decompress(data);\n            const result = new Uint8Array(view); // Copy view and free wasm memory\n            module.free_result();\n            if (out !== undefined) {\n                out.set(result);\n                return out;\n            }\n            return result;\n        }\n    },\n    _a.codecId = 'blosc',\n    _a.COMPRESSORS = [...COMPRESSORS],\n    _a.NOSHUFFLE = BloscShuffle.NOSHUFFLE,\n    _a.SHUFFLE = BloscShuffle.SHUFFLE,\n    _a.BITSHUFFLE = BloscShuffle.BITSHUFFLE,\n    _a.AUTOSHUFFLE = BloscShuffle.AUTOSHUFFLE,\n    _a);\n\n(0,_core_mjs__WEBPACK_IMPORTED_MODULE_0__.addCodec)(Zlib.codecId, () => Zlib);\r\n(0,_core_mjs__WEBPACK_IMPORTED_MODULE_0__.addCodec)(GZip.codecId, () => GZip);\r\n(0,_core_mjs__WEBPACK_IMPORTED_MODULE_0__.addCodec)(Blosc.codecId, () => Blosc);\n//# sourceMappingURL=zarr.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/zarr/zarr.mjs\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./node_modules/@aics/volume-viewer/es/workers/FetchZarrWorker.js");
/******/ 	
/******/ })()
;